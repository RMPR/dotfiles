a = "\x"
a = "\xb"
a = "\x1b[32m"
a
exit()
if "":
	print("Just to verify")
exit()
help(list)
exit()
help(list)
for i in range(3, 3):
	print("just a test")
for i in range(2, 3):
	print("just a test")
exit()
for i in range(3, 4):
	print(f"{i}")
if -1:
	print("c;est dangeruex")
exit
for i in range(4, 4):
	print("tsh")
import codecs, os;__pyfile = codecs.open('''/tmp/pybYqmT4''', encoding='''utf-8''');__code = __pyfile.read().encode('''utf-8''');__pyfile.close();os.remove('''/tmp/pybYqmT4''');exec(compile(__code, '''/tmp/pybYqmT4''', 'exec'));
help(dict)
dict = {a:1, b:2, c:3}
dict = {"a":1, "b":2, "c":3}
for node, edges in dict:
	print(f"{node}:{edges}")
for node, edges in dict.iteritems():
	print(f"{node}:{edges}")
dicto = {"a":1, "b":2, "c":3}
for node, edges in dicto:
	print(f"{node}:{edges}")
for node, edges in dicto.iteritems():
	print(f"{node}:{edges}")
for node, edges in dicto.iter():
	print(f"{node}:{edges}")
exit
exit()
1610/9
clear
subprocess.check_output("clear")
64/556
64*556
import ipywidget
import ipywidgets
from ipywidgets import interact
349*656
import os
os.path.expanduser("~")
os.path.join(os.path.expanduser("~"), "Downloads", "Mathe", "Picture.png")
bb = os.path.join(os.path.expanduser("~"), "Downloads", "Mathe", "Picture.png")
os.path.isfile(bb)
import numpy as np
list_of_genres = ['Adventure', 'Animation', 'Children', 'Comedy', 'Fantasy', 'Drama', 'Romance', 'Action', 'Thriller', 'Sci-Fi', 'Crime', 'Horror', 'Mystery', 'IMAX', 'Documentary', 'War', 'Musical', 'Western', 'Film-Noir']
my_genre = ['Action', 'Crime', 'Drama', 'Thriller']
idx = [1 if g in my_genre else 0 for g in list_of_genres]
out_arr = np.asarray(idx)
out_arr
idx
import subprocess
subprocess.run(["ls"]).stdout
subprocess.run(["ls"]).stdout.readline()
from numpy.random import choice as weighted_choice
import numpy
import os
import subprocess
import pandas
import numpy
import pandas
import numpy
from numpy.random import choice as weighted_choice
from numpy.random import choice
from numpy.random import Choice
from numpy.random import choice
from numpy.random import Choice
from numpy.random import choice
import numpy.random
from numpy.random import choice
import random
random.seed()
length = 10
10**length
10**length-1
9*10**length + (10**length-1)
def random_seed(length):
  min = 10**length
  max = 9*min + (min-1)
  return random.randint(min, max)
random_seed(10)
def random_seed(length):
  min = 10**(length-1)
  max = 9*min + (min-1)
  return random.randint(min, max)
random_seed(10)
random_seed(9)
length=random.randint(1,30)
chars=[char for char in '0123456789abcdefghijklmnopqrstuvwxyz']
print(chars)
seed=''
for i in range(length): seed=seed+random.choice(chars)
print(seed)
random.seed()
random.choice('0123456789abcdefghijklmnopqrstuvwxyz')
def random_seed(length):
  r_string = ''
  for _ in range(length):
    r_string += random.choice('0123456789abcdefghijklmnopqrstuvwxyz')
  return r_string
random_seed(10)
import os
os.urandom(16)
os.random(16)
hash = random.getrandbits(128)
print("hash value: %032x" % hash)
]
l = [random.choice('0123456789abcdefghijklmnopqrstuvwxyz')
]*10
l
l = [random.choice('0123456789abcdefghijklmnopqrstuvwxyz');random.seed()]*10
def r_letter():
  return random.choice('0123456789abcdefghijklmnopqrstuvwxyz')
l = [None]*10
map(r_letter(), l)
list(map(r_letter(), l))
def r_letter(flag):
  return random.choice('0123456789abcdefghijklmnopqrstuvwxyz')
list(map(r_letter(), l))
list(map(r_letter(None), l))
list(map(r_letter, l))
str(map(r_letter, l))
list(map(r_letter, l))
choices = '0123456789abcdefghijklmnopqrstuvwxyz'
def random_char():
   return random.choice(choices)
def random_seed(length):
  l = [None]*length
  random.seed()
  return "".join(list(map(random_char, l)))
random_seed(10)
def random_char():
   return random.choice('0123456789abcdefghijklmnopqrstuvwxyz')
def random_seed(length):
  l = [None]*length
  random.seed()
  return "".join(list(map(random_char, l)))
random_seed(10)
def random_char(flag):
   return random.choice('0123456789abcdefghijklmnopqrstuvwxyz')
random_seed(10)
choices = '0123456789abcdefghijklmnopqrstuvwxyz'
def random_char(flag):
   return random.choice(choices)
random_seed(10)
random_seed(111)
import random
choices = '0123456789abcdefghijklmnopqrstuvwxyz'
def random_char(ctrl):
   return random.choice(choices)
def random_seed(length):
  l = [None]*length
  random.seed()
  return "".join(list(map(random_char, l)))
random_seed(1)
random_seed(0)
random_seed(3)
def random_seed(length):
  os.urandom(length)
  map(ord, os.urandom(length))
random_seed(10)
import os
def random_seed(length):
  os.urandom(length)
  return map(ord, os.urandom(length))
random_seed(10)
import os
def random_seed(length):
  os.urandom(length)
  return "".join(list(map(ord, os.urandom(length))))
random_seed(10)
import os
def random_seed(length):
  return "".join(list(map(ord, os.urandom(length))))
random_seed(5)
map(ord, os.urandom(10))
list(map(ord, os.urandom(10))
)
help ord
help(ord)
digits = ["zero", "one", "two", "three", "four", "five", 
          "six", "seven", "eight", "nine"]
def to_number(nb):
  return digits[nb]
def list_numbers_in_words(n):
  b = str(n)
  return list(map(to_number(nb), b)
digits = ["zero", "one", "two", "three", "four", "five", 
          "six", "seven", "eight", "nine"]
def to_number(nb):
  return digits[nb]
def list_numbers_in_words(n):
  b = str(n)
  return list(map(to_number(nb), b)
digits = ["zero", "one", "two", "three", "four", "five", 
          "six", "seven", "eight", "nine"]
def to_number(nb):
  return digits[nb]
def list_numbers_in_words(n):
  b = str(n)
  return list(map(to_number(nb), b))
list_numbers_in_words(132421)
def list_numbers_in_words(n):
  b = str(n)
  return list(map(to_number, b))
list_numbers_in_words(132421)
def list_numbers_in_words(n):
    ns = str(n)
    single_digits = ["zero", "one", "two", "three",  
                     "four", "five", "six", "seven",  
                     "eight", "nine"]
    return [
        single_digits[int(nsi)]
        for nsi in ns
    ]
list_numbers_in_words(132421)
tokenizer = RegexpTokenizer (r'\w+')
career_df['How could the conversation have been more useful?']= career_df['How could the conversation have been more useful?'].apply(lambda x:tokenizer.tokenize(x.lower()))
def calc_cost -> float:
def calc_cost() -> float:
  return "test"
calc_cost
calc_cost()
def setZeroes(self, A):
  for i in A:
import os
os.listdir()
type(os.listdir())
files.os.listdir().pop('.fotoxx')
os.listdir().pop('.fotoxx')
os.listdir().remove('.fotoxx')
print(os.listdir().remove('.fotoxx'))
os.listdir()
files = os.listdir
files
files.remove(".cabal")
l = ["a
l = ["a", "b", "c"]
l.remove("b")
l
files = os.listdir()
files
files.remove(".fotoxx")
files
help(list.remove)
help(list)
a = "1234"
return 2*sum(map(lambda x:int(x), a))
2*sum(map(lambda x:int(x), a))
def adddigitsinstring(dig):
  return 2*sum(map(lambda x:int(x), dig))
adddigitsinstring("324124321")
adddigitsinstring("31")
adddigitsinstring("313")
adddigitsinstring("9")
import cv2
img = cv2.imread(args.img_path)
img = cv2.imread("/home/rufus/Pictures/Whatsapp_profile.PNG")
cv2.imshow('image', img)
cv2.imshow('image', img); print(img)
cv2.imshow('image', img); cv2.waitKey(0)
cv.destroyAllWindows()
cv2.destroyAllWindows()
a =251+252+245
a/3
help(sum)
help(mean)
help(avg)
help(average)
help(sum)
a = [1, 2, 3]
reduce(lambda x: x/3, a)
sum(map(lambda x:x/3, a))
version()
import sys
sys.version_info
help(venv)
venv
import sys
sys.path
venv
a = aaa
a = "aaa"
b = "bbb"
tmp = a[-1]
tmp
def perm_concatenate(a, b):
  tmp = a[-1]
  a[-1] = b[0]
  b[0] = tmp
  return a + b
perm_concatenate(a, b)
help(str)
a[:-1]
c = "fed"
c[:-1]
c[0:]
c[1:]
def perm_concatenate(a, b):
  return a[:-1] + b[0] + a[-1] + b[1:]
perm_concatenate(a, b)
a = 'aa', 'bb'
a
a[0]
a[1]
def perm_concatenate(a):
  return a[0][:-1] + a[1][0] + a[0][-1] + a[1][1:]
perm_concatenate(a)
def myreduce(func, lst):
    x = 0
    x1 = x + 1
    result = lst[x]
    while x1 < len(lst):
        applyfunc = func(result, lst[x1]) #This is the line in question
        result = applyfunc
        x += 1
        x1 += 1
    return round(result, 1)
print(myreduce('`complex`', [3, -1, 4.5, 23, 10]))
print(myreduce(complex, [3, -1, 4.5, 23, 10]))
a = [1, 1, 5, 1, 2, 4, 3]
Counter(a)
import Counter
help(counter)
help(Counter)
ranger(-5, 5)
range(-5, 5)
print(range(-5, 5))
a = range(-5, 5)
a
print(a)
a = "a very long text without as"
list(filter(lambda car: car != 'a', a))
"".join(list(filter(lambda car: car != 'a', a)))
import this
a = [1,2, 4, 1, 2]
a.pop
a.pop()
help(list)
a.insert(0, a.pop())
a
a.insert(0, a.pop())
a
help(list)
a.reverse()
a
a = [1,1,1,2,2,3]
2
a
from collections import Counter 
b = Counter(a)
b
b.keys()
from collections import Counter 
c = [1]
d = Counter(c)
d
a = [3,0,1,0]
1
a
b = Counter(a)
b
for i in b.keys():
  print(i)
b = ordered(Counter(a))
b = ord(Counter(a))
help(dict)
a="ctintcdctccc" 
Counter(a)
from collections import Counter
Counter(a)
for i in b:
  a="ctintcdctccc"  
i=0
j=0
char=""
while i<len(a)-1:
    while j<len(a)-1:
        if a[i]==a[j+1]:
            char=char+a[i]
        j+=1
    i+=1
print(char)
a="ctintcdctccc"  
char = {}
for i in a:
    if i in char:
        char[i] += 1
    else:
        char[i] = 0
char
for i in char:
 print(i)
for i in char:
 print(i.value)
i = "absdb"
i[5]
a = [[1,2],[3,4]]
a[0,1]
a[0][1]
board_ = [[[0]*N]*N]
N = 5
board_ = [[[0]*N]*N]
board_
        board_ = [[0]*N]*N
board_ = [[0]*N]*N
board_
board_[0].count(0)
       initial = ["(", ")"]*n
initial = ["(", ")"]*n
initial = ["(", ")"]*4
initial
help(str)
help(list)
a = []
a is None
a == []
def parenthesis(A=[])
    def generate_all_parenthesis(self, A, n):
        if len(A) == 2*n:
            ans.append("".join(A))
        else:
            A.append('(')
            generate(A, n)
            A.pop()
            A.append(')')
            generate(A, n)
    def generate_all_parenthesis(A=[], n):
        if len(A) == 2*n:
            ans.append("".join(A))
        else:
            A.append('(')
            generate(A, n)
            A.pop()
            A.append(')')
            generate(A, n)
a = "adsf;lkajfd"
a.pop()
help(str)
a = "adsf;lkajfd"
a[::-1]
a[:-1]
a[:-2]
a[:2]
a[2:]
reduce 
package='gekko'
import pip
if hasattr(pip, 'main'):
    from pip import main as pipmain
else:
    from pip._internal import main as pipmain
pipmain(['search','gekko'])
package = 'gekko'
import pip
from pip import main as pipmain
from pip._internal import main as pipmain
pipmain(['search', package])
pipmain(['search', 'lxml'])
a = pipmain(['search', 'lxml'])
help(str)
a
a = pipmain(['search', 'lxml'])
a
import pip
import subprocess
import json
import urllib.request
from pip._internal.operations.freeze import freeze
if hasattr(pip, 'main'):
    from pip import main as pipmain
else:
    from pip._internal import main as pipmain
def isLatestVersion(pkgName):
    # Get the currently installed version
    current_version = ''
    for requirement in freeze(local_only=False):
        pkg = requirement.split('==')
        if pkg[0] == pkgName:
            current_version = pkg[1]
    # Check pypi for the latest version number
    contents = urllib.request.urlopen(F'https://pypi.org/pypi/{pkgName}/json').read()
    data = json.loads(contents)
    latest_version = data['info']['version']
    return latest_version == current_version
import pip
import subprocess
import json
import urllib.request
from pip._internal.operations.freeze import freeze
if hasattr(pip, 'main'):
    from pip import main as pipmain
else:
    from pip._internal import main as pipmain
def isLatestVersion(pkgName):
    # Get the currently installed version
    current_version = ''
    for requirement in freeze(local_only=False):
        pkg = requirement.split('==')
        if pkg[0] == pkgName:
            current_version = pkg[1]
    # Check pypi for the latest version number
    contents = urllib.request.urlopen(F'https://pypi.org/pypi/{pkgName}/json').read()
    data = json.loads(contents)
    latest_version = data['info']['version']
import pip
import subprocess
import json
import urllib.request
from pip._internal.operations.freeze import freeze
if hasattr(pip, 'main'):
    from pip import main as pipmain
else:
    from pip._internal import main as pipmain
def isLatestVersion(pkgName):
    # Get the currently installed version
    current_version = ''
    for requirement in freeze(local_only=False):
        pkg = requirement.split('==')
        if pkg[0] == pkgName:
            current_version = pkg[1]
    contents = urllib.request.urlopen(F'https://pypi.org/pypi/{pkgName}/json').read()
    latest_version = data['info']['version']
    return latest_version == current_version
a = [0] * 3
a
for i in range(5, 1):
    print(i)\
for i in range(5, 1):
    print(i)
for i in range(5, 1):
  print(i)
def test():
  for i in range(5, 1):
    print(i)
for i in range(5):
    print(i)
range(5)
print(range(5))
for i in range(5):
    print(i)
a = [22, 31]
a[0], a[1] = a[1], a[0]
a
for i in range(1, 3):
	print(i)
a = [22, 31]
len(a)
a = [22, 31]
a[-1]
a = [22, 31]
b = [0]
a + b
a = [22, 31]
a + b
b = [0]
b = [[0]]
a + b
a = [22, 31]
a[0,]
[0,]*5
    def countBits(self, num):
        """
        :type num: int
        :rtype: List[int]
        """
        dp = [0,] * (num+1)
        dp[0] = 0
        if(num>0):
            dp[1] = 1
        curr = 2
        for i in range(2,num+1):
            if(i==curr*2):
                curr = curr * 2
            
            dp[i] = dp[i%curr] + 1
            
def countBits(self, num):
        dp = [0,] * (num+1)
        dp[0] = 0
        if(num>0):
            dp[1] = 1
        curr = 2
        for i in range(2,num+1):
            if(i==curr*2):
                curr = curr * 2
            dp[i] = dp[i%curr] + 1
def countBits(self, num):
        dp = [0,] * (num+1)
        dp[0] = 0
        if(num>0):
            dp[1] = 1
        curr = 2
        for i in range(2,num+1):
            if(i==curr*2):
                curr = curr * 2
            dp[i] = dp[i%curr] + 1
ef countBits(self, num):
def countBits(self, num):
        dp = [0,] * (num+1)
        dp[0] = 0
        if(num>0):
            dp[1] = 1
        curr = 2
        for i in range(2,num+1):
            if(i==curr*2):
                curr = curr * 2
            dp[i] = dp[i%curr] + 1
        return dp
countBits(6)
def countBits(num):
        dp = [0,] * (num+1)
        dp[0] = 0
        if(num>0):
            dp[1] = 1
        curr = 2
        for i in range(2,num+1):
            if(i==curr*2):
                curr = curr * 2
            dp[i] = dp[i%curr] + 1
        return dp
countBits(6)
help(zip)
a = "al;falskjfd"
set(a)
b = {}
b[a] = 0
a
c = al;falskfja
c = "al;falskfja"
c
b[c] = 1
b[a]
b[c]
a
c
e = 'aflals;kjfd'
e
b[e] = 1
b[a]
b[e]
a
e
a = {}
b = {}
a = set("abcdef")
b = set("defabc")
a ==b
a
b
c[a] = 0
c = {}
c[a] = 0
str(a) = str(b) 
str(a) == str(b) 
str(a)
str(b)
help{dict}
help{dict)
help(dict)
a = "ape"
b = "pea"
set(a) == set(b)
str(set(a)) == str(set(b))
str(set(a))
str(set(b))
a = [72, 71, 17, 234]
enumerate(a)
print(enumerate(a))
for i, j in enumerate(a):
  print(a)
for i, j in enumerate(a):
  print(i)
help(max)
a = [72, 71, 17, 234]
a[:]
4096/2
10^-10
10**-10
1e-10
e-10
verify
help(list)
a = [[12, 32], [1, 4]]
b = [1, 0]
a[b]
help(list)
raise(ValueError)
raise(ValueErro)
a = [[12, 32], [1, 4]]
a[0:]
a[0][0]
help(dict)
l = {}
l[1] = 2
l
l[1,2] = 2
l
import math
import random
from random import randint
for i in range(50):
    value = random.randint(1,50)
    print(math.floor(value))
def rand():
for i in range(4):
 print(i)
for i in range(1, 4):
 print(i)
import math
import random
from random import randint
def rand50():
    for i in range(1, 51):
        value = random.randint(1, i)
        print(math.floor(value))
rand50()
def rand50():
    for i in range(2, 51):
        value = random.randint(1, i)
        print(math.floor(value))def rand50():
    for i in range(2, 51):
        value = random.randint(1, i)
        print(math.floor(value))
def rand50():
    for i in range(2, 51):
        value = random.randint(1, i)
        print(math.floor(value))
rand50()
def rand50():
    for i in range(2, 51):
        value = random.randint(1, i)
        print(math.floor(value))def rand50():
    for i in range(2, 51):
        value = random.randint(1, i)
        print(value)
def rand50():
    for i in range(2, 51):
        value = random.randint(1, i)
        print(value)
rand50()
import random
from random import randint
for i in range(2, 51):
    value = random.randint(1, i)
    print(value)
data = [[
        "A 5408599",
        "B 8126880",
        "A 2003529",
    ],
    [
        "C 9925336",
        "C 3705674",
        "A 823678571",
        "C 3205170186",
    ],
    [
        "C 9772980",
        "B 8960327",
        "C 4185139021",
        "D 1226285245",
        "C 2523866271",
        "D 2940954504",
        "D 5083193",
    ]]
temp_dict = {
    item: index for index, sublist in enumerate(data)
        for item in sublist
}
print(data[temp_dict["C 9772980"]])
a = 'dl;kasdf'
a.index(1)
a.index('1')
a.index('d')
help(str)
a = 'dl;kasdf'
a.pop(2)
list(a).pop(2)
a
b = list(a)
b.pop(2)
b
a = 'dl;kasdf'
b in a
i = iter(a)
i
i.next()
i.__next__()
import printf
printf
rdd = sc.parallelize(["b", "a", "c"])
import spark
import pyspark
rdd = sc.parallelize(["b", "a", "c"])
from pyspark import SparkFiles
rdd = sc.parallelize(["b", "a", "c"])
sc = SparkContext()
from pyspark import SparkContext
sc = SparkContext()
rdd = sc.parallelize(["b", "a", "c"])
sorted(rdd.map(lambda x: (x, 1)).collect())
type(sorted(rdd.map(lambda x: (x, 1)).collect()))
type(rdd.map(lambda x: (x, 1)).collect())
import lxml
import django
import dmidecode
from pprint import pprint
def getBIOS():
    for v in dmidecode.bios().values():
        if type(v) == dict and v['dmi_type'] == 0:
            BIOSdict["Name"] = str((v['data']['Vendor']))
            BIOSdict["BuildNumber"] = str((v['data']['Version']))
            BIOSdict["SoftwareElementID"] = str((v['data']['BIOS Revision'])
)
getBIOS
getBIOS()
import dmidecode
from pprint import pprint
def getBIOS():
    for v in dmidecode.bios().values():
        if type(v) == dict and v['dmi_type'] == 0:
            BIOSdict["Name"] = str((v['data']['Vendor']))
            BIOSdict["BuildNumber"] = str((v['data']['Version']))
            BIOSdict["SoftwareElementID"] = str((v['data']['BIOS Revision'])
)
getBIOS()
return getBIOS()
print(getBIOS())
import dmidecode
    for v in dmidecode.bios().values():
        if type(v) == dict and v['dmi_type'] == 0:
            BIOSdict["Name"] = str((v['data']['Vendor']))
            BIOSdict["BuildNumber"] = str((v['data']['Version']))
for v in dmidecode.bios().values():
    if type(v) == dict and v['dmi_type'] == 0:
        BIOSdict["Name"] = str((v['data']['Vendor']))
        BIOSdict["BuildNumber"] = str((v['data']['Version']))
        BIOSdict["SoftwareElementID"] = str((v['data']['BIOS Revision']))
print(BIOSdict)
BIOSdict
dmidecode.bios()
help(dmidecode)
dmidecode
help(dmidecode)
dmidecode.bios()
help(dmidecode)
dmidecode.xmlapi
dmidecode.xmlapi()
dmidecode.xmlapi("bios")
dmidecode.xmlapi("Name")
dmidecode.xmlapi("Name", str)
dmidecode.xmlapi("data", "Vendor")
import utils
tmp = tempfile.NamedTemporaryFile(mode='w')
import tempfile
tmp = tempfile.NamedTemporaryFile(mode='w')
tmp.name
tmp.write("print('This works')")
import subprocess 
subprocess.check_output(tmp.name)
help(subprocess.check_output())
help(subprocess)
help(tempfile)
tmp.write("print('what the fuck')")
tmp.close()
tmp.name
os.path.join(tempfile.gettempdir())
import os
os.path.join(tempfile.gettempdir())
help(subprocess.Popen)
import subprocess
help(subprocess.Popen)
help(random)
import random
help(random)
import wx
a = [1, 3, 2]
a.sort()
a
type(8)
type(8) == "int"
type(8) == type(0,8)
type(8) == type(0.8)
import os
help(os)
help(os)
os.path(".)
os.path("."0
os.path(".")
help(os)
os.fspath(".)
os.fspath(".")
os.getcwd()
os.pause
import os
os.pause
os.wait
os.wait(50)
import date
import dateutil
help(dateutil)
date
import configparser
CONF = configparser.ConfigParser()
CONF.add_section("test")
with mouse.Listener(
        on_move=on_move,
        on_click=on_click,
        on_scroll=on_scroll) as listener:
    listener.join()
from pynput import mouse
from pynput import keyboard
for i in keyboard.Key:
 print(i)
a = "as;dklfjsa"
print(f"Je suis presque sur que je serais decu {a}")
print(f"Je suis presque sur que je serais decu '{a}'")
import pynput
from pynput import keyboard
keyboard.Key
for i in keyboard.Key:
 print(i)
import platform
platform.system()
import pyautogui
help(pyautogui)
from pynput import keybaord
from pynput import keyboard
keyboard.Key
for i in keyboard.Key:
 print(i)
print('^')
print('@')
a = ""
if a:
 print("hum")
if a:
 print("hum")
if not a:
 print("hum")
if 0:
 print("d;fak")
def print_prime_factors(number):
  # Start with two, which is the first prime
  factor = 2
  # Keep going until the factor is larger than the number
  while factor <= number:
    # Check if factor is a divisor of number
    if number % factor == 0:
      # If it is, print it and divide the original number
      print(factor)
      number = number / factor
    else:
      # If it's not, increment the factor by one
      factor += 1
  return "Done"
print_prime_factors(100) # Should print 2,2,5,5
def is_power_of_two(n):
  # Check if the number can be divided by two without a remainder
  while n % 2 == 0:
    n = n / 2
  # If after dividing by two the number is 1, it's a power of two
  if n == 1:
    return True
  return False
is_power_of_two(40
is_power_of_two(4)
is_power_of_two(40)
is_power_of_two(0)
is_power_of_two(-2)
def is_power_of_two(n):
  # Check if the number can be divided by two without a remainder
  if n == 0:
    return False
  while n % 2 == 0:
    n = n / 2
  # If after dividing by two the number is 1, it's a power of two
  if n == 1:
    return True
  return False
is_power_of_two(0)
def factorial(n):
    result = 1
    for x in range(n+1):
        result *= x
    return result
for n in range(10):
    print(n, factorial(n))
factorial(1)
def loop(start, stop, step):
	return_string = ""
	if step == 0:
		step = 1 if start < stop else -1
	if start < stop:
		step = abs(step) * -1
	else:
		step = abs(step)
	for count in range(start, stop, step):
		return_string += str(count) + " "
	return return_string.strip()
print(loop(11,2,3)) # Should be 11 8 5
print(loop(1,5,0)) # Should be 1 2 3 4
print(loop(-1,-2,0)) # Should be -1
print(loop(10,25,-2)) # Should be 10 12 14 16 18 20 22 24 
print(loop(1,1,1)) # Should be empty
loop(1, 2, 0)
loop(1, 5, 0)
a = 3 if True else 4
b = 3 if False else 4
bb
b
for x in range(10):
    for y in range(x):
        print(y)
y
if " ":
 print('tes nique')
Medric = "Medric"
Medric.lover()
"Medric".lover()
help(str)
dictionnary = {a:[1,2,3], b:[13,423]}
dictionnary = {"a":[1,2,3], "b":[13,423]}
for key, value in dictionnary:
 print(key)
for key, value in dictionnary.items():
 print(key)
def combine_lists(list1, list2):
  # Generate a new list containing the elements of list2
  # Followed by the elements of list1 in reverse order
  return list2.extend(list1.reverse())
  
	
Jamies_list = ["Alice", "Cindy", "Bobby", "Jan", "Peter"]
Drews_list = ["Mike", "Carol", "Greg", "Marcia"]
print(combine_lists(Jamies_list, Drews_list))
def combine_lists(list1, list2):
  # Generate a new list containing the elements of list2
  # Followed by the elements of list1 in reverse order
  return list2.extend(list1.reverse())
  
	
Jamies_list = ["Alice", "Cindy", "Bobby", "Jan", "Peter"]
Drews_list = ["Mike", "Carol", "Greg", "Marcia"]
print(combine_lists(Jamies_list, Drews_list))
def combine_lists(list1, list2):
  # Generate a new list containing the elements of list2
  # Followed by the elements of list1 in reverse order
  return list2.extend(list1.reverse())
def combine_lists(list1, list2):
 print(list1)
 print(list2)
 print(type(list1))
 print(type(list2))
Jamies_list = ["Alice", "Cindy", "Bobby", "Jan", "Peter"]
Drews_list = ["Mike", "Carol", "Greg", "Marcia"]
print(combine_lists(Jamies_list, Drews_list))
def combine_lists(list1, list2):
 list2.__len__()
print(combine_lists(Jamies_list, Drews_list))
def combine_lists(list1, list2):
 return list2.__len__()
print(combine_lists(Jamies_list, Drews_list))
Jamies_list.reverse()
print(Jamies_list.reverse())
help(list)
reverse(Drews_list)
reversed(Drews_list)
Jamies_list
Drews_list
Jamies_list.reverse()
Jamies_list
a = list(Drews_list, Jamies_list)
help(str)
a = dict(int)
a = dict(str, int)
colors = ["red", "white", "blue"]
colors.insert(2, "yellow")
colors
animal = "Hippopotamus"
animal[3:6]
import requests
requests.get("http://www.google.com")
type(requests.get("http://www.google.com"))
from pptx import Presentation
from pptx.chart.data import ChartData
shape = slide_11.shapes[5]
ReachChart= shape.chart
reach_data = ChartData()
reach_data .categories = ['reach 1', 'reach 2']
reach_data .add_series('series', tuple(3.145, 7.526))
from pptx import Presentation
from pptx.chart.data import ChartData
shape = slide_11.shapes[5]
reach_data = ChartData()
reach_data .categories = ['reach 1', 'reach 2']
reach_data .add_series('series', tuple(3.145, 7.526))
reach_data.add_series('series', tuple(3.145, 7.526))
reach_data = ChartData()
reach_data.add_series('series', tuple(3.145, 7.526))
from pptx import Presentation
from pptx.chart.data import ChartData
reach_data = ChartData()
reach_data.categories = ['reach 1', 'reach 2']
reach_data.add_series('series', tuple(3.145, 7.526))
reach_data.add_series('series', tuple((3.145, 7.526)))
ReachChart.replace_data(reach_data)
help(pptx.chart.series)
import pptx
help(pptx.chart.series)
import subprocess
dir()
subprocess.Popen("ls", shell=True)
subprocess.Popen(["ls"], shell=True)
help(subprocess)
"{:04.1f}".format(number).replace(".0", "")
number1 = 3.0
number2 = 3.5
numer1
number1
isint(number1)
help(int)
3 == 3.0
number1 == math.ceil()
import math
number1 == math.ceil()
number1 == math.ceil(number1)
def integral_formatting(n):
    return n if n != math.ceil(n) else return math.ceil(n)
number1 = 3.0
number2 = 3.5
def integral_formatting(n):
    return n if n != math.ceil(n) else math.ceil(n)
integral_formatting(number1)
integral_formatting(number2)
import pptx
help(DataLabels)
help(AreaSeries)
help(pptx.chart.data)
help(pptx.chart)
help(pptx.chart.data.AreaSeries)
help(pptx.chart)
help(pptx.chart.datalabel)
help(pptx.chart.datalabel.TextFrame)
from datetime import date
from os import path
yesterday = int(date.today().strftime("%d"))
name = "pdf" + str(yesterday) + date.today().strftime("%d-%m-%Y"))
name = "pdf" + str(yesterday) + date.today().strftime("%d-%m-%Y")
name
from datetime import date
from os import path
yesterday = int(date.today().strftime("%d"))
name = "pdf " + str(yesterday) + date.today().strftime("-%d-%m-%Y")
name 
from datetime import date
from os import path
yesterday = int(date.today().strftime("%d")) - 1
name = "pdf " + str(yesterday) + date.today().strftime("-%d-%m-%Y")
name
help(os)
import os
help(os)
yesterday = int(date.today().strftime("%d")) - 1
from datetime import date
yesterday = int(date.today().strftime("%d")) - 1
date.today()
date.yesterday()
help(date)
import calendar
import os
import shutil
from datetime import date
from os import path
def yesterday():
    day = int(date.today().strftime("%d"))
    month = int(date.today().strftime("%m"))
    year = int(date.today().strftime("%Y"))
    long_months = [1, 3, 5, 7, 8, 10, 12]
    if day != 1:
        return day - 1
    if month in long_months:
        return 31
    elif month == 2:
        if calendar.isleap(year):
            return 29
        return 28
    else:
        return 30
yesterday = int(date.today().strftime("%d")) - 1
name = "pdf " + str(yesterday()) + date.today().strftime("-%d-%m-%Y")
import calendar
import os
import shutil
from datetime import date
from os import path
def yesterday():
    day = int(date.today().strftime("%d"))
    month = int(date.today().strftime("%m"))
    year = int(date.today().strftime("%Y"))
    long_months = [1, 3, 5, 7, 8, 10, 12]
    if day != 1:
        return day - 1
    if month in long_months:
        return 31
    elif month == 2:
        if calendar.isleap(year):
            return 29
        return 28
    else:
        return 30
name = "pdf " + str(yesterday()) + date.today().strftime("-%d-%m-%Y")
yesterday
yesterday()
import time
a = time.perf_counter()
a
b
b-a
time.sleep(b-a)
os.cwd()
import os
os.cwd()
os.listdir()
from pathlib import Path
import sys
path = Path(__file__).parent.absolute()
from .. import interferences
from pathlib import Path
path = Path(__file__).parent.absolute()
path = Path().parent.absolute()
path
path = Path().parent.parent.absolute()
path
path = Path().parents[]
path = Path().parents()
path = Path().parents
path
path = Path().parents
path
path.parents[0]
path[0]
path = Path.parents[0]
path = Path().parent.absolute()
path = Path(path)
path = Path().parent.absolute()
path
path = Path(path)
path
path.parent.absolute()
path = Path(Path().parent.absolute()).parent.absolute()
path
from pathlib import Path
Path(Path(__file__).parent.absolute()).parent.absolute()
Path(Path().parent.absolute()).parent.absolute()
Path(Path().parent.absolute()).parent.relative()
with open('/home/rufus/Workspace2019/python_fiddle/countries/countries.json') as json_file:
    data = json.load(json_file)
import json
with open('/home/rufus/Workspace2019/python_fiddle/countries/countries.json') as json_file:
    data = json.load(json_file)
data 
data.keys()
somelist = range(10)
for x in somelist:
 somelist.remove(x)
for x in somelist[:]:
 somelist.remove(x)
import os
help(os)
dic = {ads:1, adt:2, adc:3}
dic = {'ads':1, 'adt':2, 'adc':3}
max(dic)
max(dic.values())
Tv = {'BreakingBad':100, 'GameOfThrones':1292, 'TMKUC' : 88} 
  
Keymax = max(Tv, key=Tv.get) 
print(Keymax) 
help(dict)
Tv = {'BreakingBad', 'GameOfThrone','TMKUC'} 
Tv
help(dict)
"bosnia" in "ireland"
"landeri" in "ireland"
import shutil
help(shutil)
import json
with open('movie_ids_02_13_2020.json') as jsonfile:
 data = json.load(jsonfile)
with open('movie_ids_02_13_2020.json') as jsonfile:
 data = json.load(jsonfile)
with open('movie_ids_02_13_2020.json') as jsonfile:
 data = json.load(jsonfile)
import json
with open('movie_ids_02_13_2020.json') as jsonfile:
 data = json.load(jsonfile)
import json
with open('movie_ids_02_13_2020.json') as jsonfile:
 data = json.load(jsonfile)
data
for i in data:
 print(i)
import time 
def json_data():
 for i in data:
  pass
a = time.perf_counter();json_data();b=time.perf_counter()
b-a
from PyDictionary import PyDictionary
dictionary=PyDictionary("hotel","ambush","nonchalant","perceptive")
print(dictionary.printMeanings())
print(dictionary.getMeanings()) 
print (dictionary.getSynonyms())
print (dictionary.translateTo("hi"))
import markdown
help(markdown)
import os
import datetime
import re
files = []
for file in os.listdir("C:\\Users\\Mayur Pawar\\Desktop\\FTP work"):
    if file.endswith(".csv"):
        files.append(file)
#s = sorted(files)
#print(files)
for file in os.listdir("."):
    if file.endswith(".csv"):
        files.append(file)
print(files)
s = sorted(files)
s
import re
last_file = max(files, key=lambda x: int(re.search(r'\d+', x).group()))
last_file
a = ";dsaklfdsaj"
"".join(a)
a = [1,2,3,5.1,2]
"".join(a)
a = ['b', 'o', 'n', 'n']
"".join(a)
help(list)
a.replace('o', 'a')
a = "".join(a)
a.replace('o', 'a')
a
a = os.listdir('.')
import os
a = os.listdir('.')
a
a = "/".join(a)
a
a.replace("/", "_")
a
b = [3,0,1,0]
b[1:]
a[1:]
files = /Users/apt/testdir/d1/a.txt 
/Users/apt/testdir/d1/d3/a.txt 
/Users/apt/testdir/d1/d3/d4/a.txt 
a = list()
a.append('/Users/apt/testdir/d1/a.txt')
a.append('/Users/apt/testdir/d1/d3/a.txt')
a.append('/Users/apt/testdir/d1/d3/d4/a.txt')
a.append('/Users/apt/testdir/d1/d3/d5/a.txt')
a
import os
def copy(file, new_dir):
   file_name=file[1:]
   file_name=file_name.replace('/', "_")
   file_path=os.path.join(new_dir, file_name)
   shutil.copy(file, new_dir)
   os.chdir(os.path.abspath(new_dir))
   os.rename(list(os.path.split(file))[1], file_name)
for file in a:
 copy(file, '.')
import shutil
for file in a:
 copy(file, '.')
import file
from PyDictionary import PyDictionary 
dictionary = PyDictionary() 
print (dictionary.synonym("Life")) 
from PyDictionary import PyDictionary 
dictionary = PyDictionary() 
print (dictionary.synonym("Life")) 
from threading import Thread
t = Thread()
t.daemon = True
t.start
t.start()
t._stop()
import threading
threading.enumerate()
t.start()
int('(9')
Boolean
Bool
type(True)
bool
a = bool("True")
a
a = bool("Te")
a
a = bool("")
a
import os
help(os.environ)
os.environ
os.environ("HOME")
os.environ.get("HOME")
os.environ.get("home")
import platform
platform.system()
os.join
os.path
os.path.join
import os
help(os.path.join)
os.environ.get('XDG_CONFIG_HOME')
os.environ
"/home/rufus" in os.environ
"/home/rufus" in os.environ.values()
"/home/rufus/.config" in os.environ.values()
import pyinstaller
import PyInstaller
help(PyInstaller)
help(PyInstaller.building)
PyInstaller.DEFAULT_DISTPATH
PyInstaller.PLATFORM
PyInstaller.compat
PyInstaller.sys
PyInstaller.sys.executable
PyInstaller.utils
PyInstaller.utils.git
PyInstaller.utils.git.exec_command
help(PyInstaller.utils.git.exec_command)
help(PyInstaller.utils.git.exec_command_rc)
help(PyInstaller.pkg_resources)
import Pyinstaller
import PyInstaller
help(PyInstaller.__main__)
from Pynstaller.__main__ import run
from PyInstaller.__main__ import run
help(run)
help(PyInstaller.__main__)
help(PyInstaller.__main__.run_build)
from PyInstaller.__main__ import run_build
run()
from PyInstaller.__main__ import run
run() /home/rufus/hello.py
from PyInstaller.__main__ import run
run("/home/rufus/hello.py")
from PyInstaller.__main__ import run
run(['hello.py', '--onefile'])
run(['hello.py', '--onefile', '-OO'])
import os
os.listdir('home/rufus')
os.listdir('/home/rufus')
TMP_PATH=/tmp/atbswp-20200224
TMP_PATH="/tmp/atbswp-20200224"
executable_path = Path(TMP_PATH).parent.absolute()
from pathlib import Path
executable_path = Path(TMP_PATH).parent.absolute()
executable_path
executable_name = os.listdir(os.path.join(executable_path, "dist"))
import os
executable_name = os.listdir(os.path.join(executable_path, "dist"))
executable_name
executable_path = os.path.join(executable_path, executable_name[0])
executable_path
from pathlib import Path
from PyInstaller.__main__ import run
run(['/tmp/hello.py'])
run(['/tmp/hello.py', '--distpath=/tmp', '--workpath=/tmp'])
from PyInstaller.__main__ import run
run(['/tmp/hello.py', '--distpath=/tmp', '--workpath=/tmp/atbswp'])
y
ls
from PyInstaller.__main__ import run
run(['/tmp/hello.py', '--distpath=/tmp/dist', '--workpath=/tmp/build'])
from PyInstaller.__main__ import run
run(['/tmp/hello.py', '--distpath=/tmp/dist', '--workpath=/tmp/build', '--onefile'])
from PyInstaller.__main__ import run
run(['/tmp/hello.py', '--runtime-tmpdir=/tmp", '--onefile'])
run(['/tmp/hello.py', '--runtime-tmpdir=/tmp', '--onefile'])
ls /tmp
import os
run(['/tmp/hello.py', '--runtime-tmpdir=/tmp', '--onefile'])
from PyInstaller.__main__ import run
os.chdir('/tmp')
run(['/tmp/hello.py', '--onefile'])
from PyInstaller.__main__ import run
import os
man os.rmdir
help(os.rmdir)
import os
help(os.rmdir)
import s
import os
help(os.rmdir)
locals
locals()
globals()
import runpy
help(runpy.run_path)
import sys
help(sys)
Now it's the truth time ... Anyway I'll try my bestNow it's the truth time ... Anyway I'll try my best
import pyautogui
help(pyautogui)
import freeze
help(freeze)
import cx-freeze
import cx_Freeze
help(cx_Freeze)
Executables = [cx_Freeze.Executable("test.py")]
Executables = [cx_Freeze.Executable("hello.py")]
cx_Freeze.setup(
 name="Say hello"
cx_Freeze.setup(
 name="Say Hello",
 executables = Executables
)
from cx_Freeze import setup, Executable
# Dependencies are automatically detected, but it might need
# fine tuning.
buildOptions = dict(packages = [], excludes = [])
base = 'Console'
executables = [
    Executable('hello.py', base=base)
]
setup(name='hello',
      version = '1.0',
      description = 'ldsa;kjf',
      options = dict(build_exe = buildOptions),
      executables = executables)
status = bool('True')
status
status = bool('False')
int('a')
import wx
wx.WK_F1
wx.WXK_F1
wx.WXK_F10
wx.WXK_F12
wx.WXK_F9
from selenium import webdriver
help(input)
ord('a')
a = "hello"
b = ''.join([chr(ord(x)+13) for x in a])
b
''.join([chr(ord(x)+13) for x in b])
a = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
b = ''.join([chr(ord(x)+13) for x in a])
b
ord('a')
chr(ord('a'))
rot13 = bytes.maketrans(
    b"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
    b"nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM")
b'Hello world!'.translate(rot13
)
return ''.join([chr(ord(n) + (13 if 'Z' < n < 'n' or n < 'N' else -13)) if ('a' <= n <= 'z' or 'A' <= n <= 'Z') else n for n in string])
''.join([chr(ord(n) + (13 if 'Z' < n < 'n' or n < 'N' else -13)) if ('a' <= n <= 'z' or 'A' <= n <= 'Z') else n for n in a])
b = ''.join([chr(ord(n) + (13 if 'Z' < n < 'n' or n < 'N' else -13)) if ('a' <= n <= 'z' or 'A' <= n <= 'Z') else n for n in a])
''.join([chr(ord(n) + (13 if 'Z' < n < 'n' or n < 'N' else -13)) if ('a' <= n <= 'z' or 'A' <= n <= 'Z') else n for n in b])
''.join([chr(ord(n) + (13 if 'Z' < n < 'n' or n < 'N' else -13)) if ('a' <= n <= 'z' or 'A' <= n <= 'Z') else n for n in input("Entrez la chaine que vous voulez chiffrer/dechiffrer)])
''.join([chr(ord(n) + (13 if 'Z' < n < 'n' or n < 'N' else -13)) if ('a' <= n <= 'z' or 'A' <= n <= 'Z') else n for n in input("Entrez la chaine que vous voulez chiffrer/dechiffrer")])
a
''.join([chr(ord(n) + (13 if 'Z' < n < 'n' or n < 'N' else -13)) if ('a' <= n <= 'z' or 'A' <= n <= 'Z') else n for n in input("Entrez la chaine que vous voulez chiffrer/dechiffrer : \n")])
blabla
''.join([chr(ord(n) + (13 if 'Z' < n < 'n' or n < 'N' else -13)) if ('a' <= n <= 'z' or 'A' <= n <= 'Z') else n for n in input("Entrez la chaine que vous voulez chiffrer/dechiffrer : \n")])
oynoyn
from enum import Enum
help(Enum)
help(str)
from itertools import Counter
from itertools import counter
from itertool import counter
from more_itertools import Counter
from collections import Counter
help(Counter)
import pathlib
help(pathlib)
import os
help(os)
help(pathlib)
from itertools import zip_longest
try:
    numbers1 = [int(line) for line in open('file1').readlines()]
    numbers2 = [int(line) for line in open('file2').readlines()]
except:
    print("Error opening files")
result = [line[0] + line[1] for line in zip_longest(numbers1, numbers2, fillvalue="0")]
zip_longest(numbers1, numbers2, fillvalue="0")
list(zip_longest(numbers1, numbers2, fillvalue="0"))
result = [line[0] + line[1] for line in zip_longest(numbers1, numbers2, fillvalue=0)]
result
from itertools import zip_longest
try:
    numbers1 = [int(line) for line in open('file1').readlines()]
    numbers2 = [int(line) for line in open('file2').readlines()]
except:
    print("Error opening files")
result = [line[0] + line[1] for line in zip_longest(numbers1, numbers2, fillvalue=0)]
numbers2 = [int(line) for line in open('file2').readlines()]
try:
    numbers2 = [int(line) for line in open('file2').readlines()]
except FileNotFoundError:
    print("marche")
help(file)
help(File)
help(open)
from itertools import zip_longest
try:
    numbers1 = [int(line) for line in open('file1').readlines()]
    numbers2 = [int(line) for line in open('file2').readlines()]
except FileNotFoundError:
    print("Error opening files")
result = [line[0] + line[1] for line in zip_longest(numbers1, numbers2, fillvalue=0)]
result
from random import randint
randint(1, 10)
for i in range(10):
  randint(1, 10)
for i in range(9):
  randint(1, 10)
from itertools import zip_longest
try:
    numbers1 = [int(line) for line in open('file1').readlines()]
    numbers2 = [int(line) for line in open('file2').readlines()]
except FileNotFoundError:
    print("Error opening files")
result = [line[0] + line[1] for line in zip_longest(numbers1, numbers2, fillvalue=0)]
result
import numpy
numpy.array([1, 2, 4, 5])
numpy.array('89-50-4E-47-0D-0A-1A-0A-00-00-00-0D-49'.split('-'))
int(x, 16)
import numpy as np
hex_string = '89-50-4E-47-0D-0A-1A-0A-00-00-00-0D-49'
np.array([int(x, 16) for x in hex_string.split('-')])
100-99.99
0.01/100
0.0001*365*24
from itertools import zip_longest
try:
    with open("file1") as file1, open("file2") as file2:
        numbers1 = [int(line) for line in file1.readlines()]
        numbers2 = [int(line) for line in file2.readlines()]
except FileNotFoundError:
    print("Error opening files")
result = [line[0] + line[1] for line in zip_longest(numbers1, numbers2, fillvalue=0)]
from itertools import zip_longest
try:
    with open("file1") as file1, open("file2") as file2:
        numbers1 = [int(line) for line in file1.readlines()]
        numbers2 = [int(line) for line in file2.readlines()]
        result = [line[0] + line[1] for line in zip_longest(numbers1, numbers2, fillvalue=0)]
except FileNotFoundError:
    print("Error opening files")
from itertools import zip_longest
try:
    with open("file1") as file1, open("file2") as file2:
        numbers1 = [int(line) for line in file1.readlines()]
        numbers2 = [int(line) for line in file2.readlines()]
        result = [line[0] + line[1] for line in zip_longest(numbers1, numbers2, fillvalue=0)]
except FileNotFoundError:
    print("Error opening files")
from itertools import zip_longest
try:
    with open("file1") as file1, open("file2") as file2:
        numbers1 = [int(line) for line in file1.readlines()]
        numbers2 = [int(line) for line in file2.readlines()]
        result = [line[0] + line[1] for line in zip_longest(numbers1, numbers2, fillvalue=0)]
except FileNotFoundError:
    print("Error opening files")
result
help(dict)
help(max)
a = {a:2, b:3, c:4}
a = {"a":2, "b":3, "c":4}
max(a)
help(dict)
a = {1: 2, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 2, 8: 2, 9: 2, 10: 1}
max(a)
a[10]
max(a, key=values)
max(a, key=value)
max(a.keys())
max(a.values)
max(a.values())
a = {"a":2, "b":3, "c":1}
max(a)
help(max)
max(a, key=a.values())
max(a, key=a.values)
max(a, key=operator.values)
max(a, key=operator.itemgetter(1))
import operator
max(a, key=operator.itemgetter(1))
max(a, key=operator.itemgetter(1))[0]
max(a.items(), key=operator.itemgetter(1))[0]
max(a.items(), key=operator.itemgetter(1))
x = "4,7,5,33,2,8"
z = x.split()
y = tuple(z)
print(z,y)
a = tuple()
a
a = tuple('az')
a
y = tuple(x)
y
z
a = {"hi": "hoi", "ability": "yoruko", "able": "boloi", "about": "oklo", "above": "nad", "amazing": "amazo"}
Answer = input("Language? (Set) ")
if Answer == "Set":
    something = input("Say something to be translated. ") #get input
    Say2 = something.split() #split into list
    for i in Say2: #for loop
a = {"hi": "hoi", "ability": "yoruko", "able": "boloi", "about": "oklo", "above": "nad", "amazing": "amazo"}
Answer = input("Language? (Set) ")
if Answer == "Set":
    something = input("Say something to be translated. ") #get input
    Say2 = something.split() #split into list
    for i in Say2: #for loop
a = {"hi": "hoi", "ability": "yoruko", "able": "boloi", "about": "oklo", "above": "nad", "amazing": "amazo"}
Answer="Set"
if Answer == "Set":
    something = input("Say something to be translated. ") #get input
    Say2 = something.split() #split into list
    for i in Say2: #for loop
        print(a[i])
about
    something = input("Say something to be translated. ") #get input
    Say2 = something.split() #split into list
    for i in Say2: #for loop
if Answer == "Set":
    something = input("Say something to be translated. ") #get input
    Say2 = something.split() #split into list
    for i in Say2: #for loop
        print(a[i])
hi, amazing
help(dict)
if Answer == "Set":
    something = input("Say something to be translated. ") #get input
    Say2 = something.split() #split into list
    for i in Say2: #for loop
        print(a.get(i, default="No translation available"))
hi, amazing
if Answer == "Set":
    something = input("Say something to be translated. ") #get input
    Say2 = something.split() #split into list
    for i in Say2: #for loop
        print(a.get(i, "No translation available"))
hi, amazing
if Answer == "Set":
    something = input("Say something to be translated. ") #get input
    Say2 = something.split() #split into list
    for i in Say2: #for loop
        try:
            print(a[i])
        except KeyError:
            print("No translation available")
hi, amazing
import re
if Answer == "Set":
    something = input("Say something to be translated. ") #get input
    Say2 = re.split('; |, |\*|\n |.', something) #split into list
    for i in Say2: #for loop
        print(a.get(i, "no translation available"))
hi. amazing
if Answer == "Set":
    something = input("Say something to be translated. ") #get input
    Say2 = re.split('; |, | .', something) #split into list
    for i in Say2: #for loop
        print(a.get(i, "no translation available"))
hi. amazing
if Answer == "Set":
    something = input("Say something to be translated. ") #get input
    Say2 = re.split('; |, | .', something) #split into list
    for i in Say2: #for loop
        print(a.get(i, "no translation available"))
if Answer == "Set":
    something = input("Say something to be translated. ") #get input
    Say2 = re.split('; |, ', something) #split into list
    for i in Say2: #for loop
        print(a.get(i, "no translation available"))if Answer == "Set":
    something = input("Say something to be translated. ") #get input
    Say2 = re.split('; |, ', something) #split into list
    for i in Say2: #for loop
        print(a.get(i, "no translation available"))
if Answer == "Set":
    something = input("Say something to be translated. ") #get input
    Say2 = re.split('; |, ', something) #split into list
    for i in Say2: #for loop
        print(a.get(i, "no translation available"))
hi; amazing
if Answer == "Set":
    something = input("Say something to be translated. ") #get input
    Say2 = re.split('; |, ', something) #split into list
    for i in Say2: #for loop
        print(a.get(i, "no translation available"))
hi;amazing
if Answer == "Set":
    something = input("Say something to be translated. ") #get input
    Say2 = re.split('; |, |. |: ', something) #split into list
    for i in Say2: #for loop
        print(a.get(i, "no translation available"))
hi: amazing
if Answer == "Set":
    something = input("Say something to be translated. ") #get input
    Say2 = re.split('; |, |. |: ', something) #split into list
    for i in Say2: #for loop
        print(a.get(i, "no translation available"))
hi. amazing
"https___c".split("_")
enter def  play():
import pyo
s = pyo.Server()
s.boot()
s.start()
s.setInputDevice(4)
s.setOutputDevice(4)
p = input("path: ")
play_audio1 = pyo.SfPlayer(path=p, speed=[1.25, 1.25])
play_audio1.out()
s.gui(locals(), exit=False)
play()
help(list)
l1 = [1,46,8,9,4,76,797,342,3,5,67,42,87]
l2 = [42,34,5,78,8,9,4]
for i in l1:
    print(l2.index(i))
help(list)
for i in l1:
    try:
        print(l2.index(i))
    except ValueError:
        continue
for i in range(len(l1)):
    try:
        if l2.index(l1(i)):
            print(i)
    except ValueError:
        continue
for i in range(len(l1)):
    try:
        if l2.index(l1[i]):
            print(i)
    except ValueError:
        continue
help(map)
map(lambda x, y: x==y, l1)
print(map(lambda x, y: x==y, l1))
map(lambda x, y: x + y, l1, l2)
print(map(lambda x, y: x + y, l1, l2))
list(map(lambda x, y: x + y, numbers1, numbers2))
list(map(lambda x, y: x + y, l1, 2))
list(map(lambda x, y: x + y, l1, l2))
list(map(lambda x, y: x == y, l1, l2))
list(map(lambda x: x if x in l2, l1))
list(map(lambda x: x in l2, l1))
[i for i, v in enumerate(l1) if v in l2]
for i in range(len(l1)):
    try:
        if l2.index(l1[i]):
            print(i)
    except ValueError:
        continue
[i for i, v in enumerate(l1) if v in l2]
l1
l2
for i in range(len(l1)):
    try:
        if l2.index(l1[i]):
            print(i)
    except ValueError:
        pass
for i in range(len(l1)):
    try:
        if l1[i] in l2:
            print(i)
    except ValueError:
        pass
[1,1,2]
nums = [1,1,2]
nums = [num for num in set(nums)]
nums
help(list)
nums = [1,1,2]
nums[:-1]
nums = [1,1,2]
nums[:-2]
min(nums[:-2])
min(nums[:-3])
prices = [3,2,6,5,0,3]
        minimum = min(prices[:-1])
minimum = min(prices[:-1])
minimum
prices[:-1]
prices = [7,1,5,3,6,4]
n = len(prices)
profit = 0
 for i in range(n, 0):
for i in range(n, 0):
    for j in range(i-1, 0):
        profit = prices[i] - prices[j]
        if profit > 0:
            profits.append(profit)
profits
profits = []
for i in range(n, 0):
    for j in range(i-1, 0):
        profit = prices[i] - prices[j]
        if profit > 0:
            profits.append(profit)
profits
for i in range(n, 0):
    for j in range(i-1, 0):
        profit = prices[i] - prices[j]
        print(profit)
        if profit > 0:
            profits.append(profit)
for i in range(n, 0):
...     for j in range(i-1, 0):
...         profit = prices[i] - prices[j]
i
        profits = []
        n = len(prices)
        profit = 0
        for i in range(n, 0):
            for j in range(i-1, 0):
                profit = prices[i] - prices[j]
                if profit > 0:
                    profits.append(profit)
profits = []
n = len(prices)
profit = 0
for i in range(n, 0):
    for j in range(i-1, 0):
        profit = prices[i] - prices[j]
        if profit > 0:
            profits.append(profit)
prices = [7,1,5,3,6,4]
profits = []
n = len(prices)
profit = 0
for i in range(n, 0):
    for j in range(i-1, 0):
        profit = prices[i] - prices[j]
        if profit > 0:
            profits.append(profit)
return max(profits)
profits = []
n = len(prices)
profit = 0
for i in range(n, 0):
    for j in range(i-1, 0):
        profit = prices[i] - prices[j]
        if profit > 0:
            profits.append(profit)
return max(profits)
profits = []
n = len(prices)
profit = 0
for i in range(n, 0):
    for j in range(i-1, 0):
        profit = prices[i] - prices[j]
        if profit > 0:
            profits.append(profit)
profits = []
n = len(prices)
profit = 0
for i in range(n, 0):
    for j in range(i-1, 0):
        profit = prices[i] - prices[j]
        if profit > 0:
            profits.append(profit)
    print(i)
        print(j)
profits = []
n = len(prices)
profit = 0
for i in range(n, 0):
    for j in range(i-1, 0):
        profit = prices[i] - prices[j]
        if profit > 0:
            profits.append(profit)
        print(j)
    print(i)
range(n, 0)
for i in range(6, 0):
 print(i)
for i in range(6, 0, -1):
 print(i)
a = list(range(12))
a
for i in a:
n = 0
for i in a:
 a[n]+=1
 n+=1
a
bar = ['1', 'O', 'o', 'o', 'X', '1']
n = 0
for i in bar:
 bar[n] = '['
 n+=1
bar
import subprocess
subprocess.check_output(['wl-copy', '<(toi)'])
import subprocess
subprocess.check_output(['wl-copy', '<', 'toi'])
subprocess.check_output(['grep', '-a', '<kodi_crashlog-20200413_025045.log'])
score_list = [['Harry', 37.21], ['Berry', 37.21], ['Tina', 37.2], ['Akriti', 41.0], ['Harsh', 39.0]]
score_list.sort(key = lambda x: (x[1], x[0]), reverse=True)
score_list
score_list.sort(key = lambda x: (x[1], x[0]))
help(list)
help(list.score)
help(list.sort)
score_list.sort(cmp = lambda x: (x[1], x[0]))
help(list.sort)
score_list.sort(lambda x: (x[1], x[0]))
['Harry', 37.21] >['Berry', 37.21]
['Harry', 37.21] >= ['Berry', 37.21]
['Harry', 37.21] < ['Berry', 37.21]
score_list.sort()
score_list
score_list.sort(reverse=True)
score_list
python 
a = ['Ishaan - 72', 'Jack - 84', 'Bob - 23', 'Louis - 77']
a.sort(key=lambda x: x.split(" - ")[-1])
a
with open('movie_ids_02_13_2020.json') as jsonfile:
 data = json.load(jsonfile)
import json
with open('movie_ids_02_13_2020.json') as jsonfile:
 data = json.load(jsonfile)
data
deduplicated_dictionnary = list(set(data))
data.sort()
friends = friends =[["Myeong Tae","Korea","Incheon"],["Tae Hwan","Korea","JeJu"],["Lee Boon Tat","Malaysia","Klang"],["Hong Woo Jin","Korea","Bucheon"],["Kim kyung Tae","Korea","Seoul"],["Michael Jackson","Malaysia","Selangor"],["Son Heung Min","Malaysia","Penang"],["Riu Shan Sil","Korea","Gwang Meoung"],["Paul Kim","Malaysia","Malaca"],["Ki Ryang Park","Korea","Dae Jeon"]]
friends =[["Myeong Tae","Korea","Incheon"],["Tae Hwan","Korea","JeJu"],["Lee Boon Tat","Malaysia","Klang"],["Hong Woo Jin","Korea","Bucheon"],["Kim kyung Tae","Korea","Seoul"],["Michael Jackson","Malaysia","Selangor"],["Son Heung Min","Malaysia","Penang"],["Riu Shan Sil","Korea","Gwang Meoung"],["Paul Kim","Malaysia","Malaca"],["Ki Ryang Park","Korea","Dae Jeon"]]
friends
def yummy(name="", home_country="", home_state=""):
 for friend in friends:
def yummy(name="", home_country="", home_state=""):
    for friend in friends:
        if name in friend or home_country in friend or home_state in friend:
            return friend
    return "No result found"
yummy(name="Myeong Tae")
def yummy(name="", home_country="", home_state=""):
    result = []
    for friend in friends:
        if name in friend or home_country in friend or home_state in friend:
            result.append(friend)
    return result
yummy(name="Myeong Tae")
time_horizon = 4*7
number_shifts = 3
qqq = [[0 for i in range(time_horizon)] for j in range(number_shifts)]
count = 0
for i in range(time_horizon):
    for j in range(number_shifts):
        qqq[j][i] = count
        count = count+1
print(qqq)
time_horizon = 4*7
number_shifts = 3
qqq = [[0 for i in range(time_horizon)] for j in range(number_shifts)]
count = 0
for i in range(time_horizon):
    for j in range(number_shifts):
        qqq[j][i] = count
        count = count+1
qqq
import pillow
import pil
ScoresWithNames = ['Ishaan - 72', 'Jack - 84', 'Bob - 23', 'Louis - 77']
ScoresWithNames.sort(key=lambda x: x.split(" - ")[-1])
ScoresWithNames
score_list = [['Harry', 37.21], ['Berry', 37.21], ['Tina', 37.2], ['Akriti', 41.0], ['Harsh', 39.0]]
score_list.sort(reverse=True)
score_list
score_list.sort
score_list.sort()
score_list
score_list.reverse()
score_list
score_list.sort()
score_list
score_list.sort(lambda x: (x[1], x[0]), reverse=True)
score_list.sort(key= lambda x: (x[1], x[0]), reverse=True)
score_list
score_list = [tuple(s.lower() for s in x) for x in L]
score_list = [tuple(s.lower() for s in x) for x in score_list]
score_list = [tuple(x[0].lower(), x[1]) for x in score_list]
score_list = [tuple([x[0].lower(), x[1]]) for x in score_list]
score_list.sort(key= lambda x: (x[1], x[0]), reverse=True)
score_list
('berry', 37.21) >('harry', 37.21)
('berry', 37.21) >=('harry', 37.21)
('berry', 37.21) <=('harry', 37.21)
'harry' > 'berry'
'berry' > 'barry'
help(sorted)
def tuple_ord(x):
from operator import attrgetter
from operator import itemgetter
s = sorted(score_list, key=itemgetter(0))
s
sorted(s, key=itemgetter(1), reverse=True)
s
score_list = [tuple([x[0].lower(), x[1]]) for x in score_list]
score_list = [['Harry', 37.21], ['Berry', 37.21], ['Tina', 37.2], ['Akriti', 41.0], ['Harsh', 39.0]]
s = sorted(score_list, key=itemgetter(0))
s
s = sorted(score_list, key=itemgetter(1))
s
sorted(s, key=itemgetter(0), reverse=True)
sorted(s, key=itemgetter(0))
score_list
>>> from operator import attrgetter, itemgetter
from operator import attrgetter, itemgetter
s
s = sorted(score_list, key=itemgetter(1), reverse=True)
s
sorted(s, key=itemgetter(0))
scorefrom operator import attrgetter, itemgetter
s = sorted(score_list, key=itemgetter(1), reverse=True)
from operator import attrgetter, itemgetter
s = sorted(score_list, key=itemgetter(1), reverse=True)
score_list = sorted(s, key=itemgetter(0))
score_list
score_list = [['Harry', 37.21], ['Berry', 37.21], ['Tina', 37.2], ['Akriti', 41.0], ['Harsh', 39.0]]
score_list
score_list.sort(key=itemgetter(1), reverse=True)
score_list = sorted(s, key=itemgetter(0))
score_list = [['Harry', 37.21], ['Berry', 37.21], ['Tina', 37.2], ['Akriti', 41.0], ['Harsh', 39.0]]
from operator import attrgetter, itemgetter
s = sorted(score_list, key=itemgetter(1), reverse=True)
score_list = sorted(s, key=itemgetter(0))
score_list
score_list = [['Harry', 37.21], ['Berry', 37.21], ['Tina', 37.2], ['Akriti', 41.0], ['Harsh', 39.0]]
score_list.sort(key=itemgetter(1), reverse=True)
score_list.sort(key=itemgetter(0))
score_list
score_list = [['Harry', 37.21], ['Berry', 37.21], ['Tina', 37.2], ['Akriti', 41.0], ['Harsh', 39.0]]
score_list.sort(key=itemgetter(1), reverse=True).sort(key=itemgetter(0))
score_list = sorted(score_list, key=itemgetter(1), reverse=True).sort()
score_list
score_list = [['Harry', 37.21], ['Berry', 37.21], ['Tina', 37.2], ['Akriti', 41.0], ['Harsh', 39.0]]
score_list = sorted(score_list, key=itemgetter(1), reverse=True).sort()
score_list
score_list = [['Harry', 37.21], ['Berry', 37.21], ['Tina', 37.2], ['Akriti', 41.0], ['Harsh', 39.0]]
score_list = sorted(score_list, key=itemgetter(1), reverse=True).sort(key=itemgetter(0))
score_list
sorted(score_list, key=itemgetter(1), reverse=True).sort(key=itemgetter(0))
score_list = [['Harry', 37.21], ['Berry', 37.21], ['Tina', 37.2], ['Akriti', 41.0], ['Harsh', 39.0]]
import pyopencl
score_list = [['Harry', 37.21], ['Berry', 37.21], ['Tina', 37.2], ['Akriti', 41.0], ['Harsh', 39.0]]
score_list = sorted(score_list,key = lambda x: (-x[1], x[0]))
score_list
score_list.sort(key=itemgetter(1), reverse=True)
from operator import attrgetter, itemgetter
score_list.sort(key=itemgetter(1), reverse=True)
score_list.sort(key=itemgetter(0))
score_list
score_list = [['Harry', 37.21], ['Berry', 37.21], ['Tina', 37.2], ['Akriti', 41.0], ['Harsh', 39.0]]
{i: v for i,v in score_list.items()}
{v[0]: v[1] for v in score_list}
import json
help(json)
import json
new = json.load("tv_series_ids_02_13_2020.json")
new = json.load(open("tv_series_ids_02_13_2020.json"))
new
json.dump(new, open("tokens_new.json", "w"))
import os
os.listdir()
help(json)
json.dumps(new, open("tokens_new.json", "w"), indent=4)
json.dumps(new, open("tokens_new.json", "w"))
help(json)
json.dump(new, open("tokens_new.json", "w"))
import shutil
shutil.copy("
shutil.copy("tv_series_ids_02_13_2020.json", "tokens_new.json")
json.dumps(new, open("tokens_new.json", "w"), parsed=False, indent=4)
help(json.dumps)
json.dump(new, open("tokens_new.json", "w"), ensure_ascii=True, indent=4)
lines = ['CONDITIONS="1=1"', 'ENVIRONMENT=DEV', 'EC2_USER_HOME=/medaff/Scripts', 'AMPIL_LOCAL_MERGED_DIR=/medaff/eureka/RawLayer']
def print_data(data):
    for line in lines:
        if data in lines:
           print(line.replace(data, "")
def print_data(data):
 for line in lines:
  if data in lines:
def print_data(data):
 for line in lines:
  if data in line:
   print(line.replace(data, "")
for line in lines
for line in lines:
 if "CONDITIONS" in line:
  print(line.replace("CONDITIONS", "")
def print_data(data):
    for line in lines:
        if data in line:
           print(line.replace(data+"=", "")
           break
def print_data(data):
 for line in lines:
  if data in line:
   print(line.replace(data+"=", "")
print_data("CONDITION")
def print_data(data):
 for line in lines:
  print(line)
lines
print("fuck")
print_data("fuck")
help(split)
help(str)
{line.split("=", 1)[0]:line.split("=", 1)[-1] for line in lines}
{line.split("=", 1)[0]:line.split("=", 1)[-1] for line in lines}['CONDITIONS']
def print_data(data):
    for line in lines:
        if data in line:
           print(line.replace(data+"=", "")
print_data('CONDITION')
def print_data(data):
    for line in lines:
        if data in line:
           print(line.replace(data+"=", "")
print_data('CONDITION')
def print_data(data):
    for line in lines:
        if data in line:
           print(line.replace(data+"=", ""))
print_data('CONDITION')
lines = ['CONDITIONS="1=1"', 'ENVIRONMENT=DEV', 'EC2_USER_HOME=/medaff/Scripts', 'AMPIL_LOCAL_MERGED_DIR=/medaff/eureka/RawLayer']
def print_data(data):
    for line in lines:
        if data in line:
           print(line.replace(data+"=", ""))
print_data('CONDITION')
def print_data(data):
    for line in lines:
        if data in line:
           temp = line
           print(temp.replace(data+"=", ""))
print_data('CONDITION')
temp
help(str)
print_data("CONDITION")
print_data("CONDITIONs")
print_data("CONDITIONS")
def print_data(data):
    for line in lines:
        if data in line:
           print(line.replace(data+"=", ""))
print_data('CONDITIONS')
print_data('CONDITION')
print_data('ENVIRONMENT=DEV')
print_data('ENVIRONMENT')
studenten = "Jeremy Underwood, Louis Malone, Jett Obrien, Lee Cordova, Avery Hill, Amanda Fowler, Callum Ferguson, Hallie Clark, Branson Calhoun"
studenten1 = studenten.split(",")
studenten1
print(sorted(studenten1, key=lambda x: x.split()[-1]))
print(sorted(studenten1,lstrip(), key=lambda x: x.split()[-1]))
data = {'\u001b[31mKEY\u001b[0m': 'value'}
print(json.dump(data))
import json
data = {'\u001b[31mKEY\u001b[0m': 'value'}
print(json.dump(data))
print(json.dumps(data))
print(json.dumps(data), ensure_ascii=True)
print(json.dumps(data, ensure_ascii=True})
print(json.dumps(data, ensure_ascii=True))
data = {b'\u001b[31mKEY\u001b[0m': 'value'}
data
data = {'\u001b[31mKEY\u001b[0m': 'value'}
print(json.dump(data, open("test_color", "w"))
print(json.dump(data, open("test_color", "w"))}
print(json.dump(data, open("test_color", "w")))
print(json.dump(data, open("test_color.json", "w")))
import random
help(choices)
help(random.choices)
import nltk
help(nltk.word_tokenizer)
help(nltk.word_tokenize)
import re
phrase = ""
re.split('; |, |. |: ', phrase))
re.split('; |, |. |: ', phrase)
phrase="abc ABC - - 12 V"
re.split('; |, |. |: ', phrase)
help(re.split)
re.split('\s+|-', phrase)
re.split('\s+|-+', phrase)
phrase
help(re.split)
re.split('\s+|-', phrase)
re.split('\s+| - ', phrase)
re.split('\s+|-', phrase)
re.split('\s+|-*', phrase)
a = 258
b = 258
id(a)
id(b)
re.split('\s+-*', phrase)
re.split('\s+-*\s+', phrase)
re.split('\s*-*\s*', phrase)
re.split('\s+(-*\s*)*', phrase)
re.split('\s+(-*\s)*', phrase)
re.split('\s+|-+\s+', phrase)
re.split('\s+-*\s+', phrase)
re.split('(\s+-*)+', phrase)
re.split('(\s+-*)*', phrase)
re.split('(\s+-*)+', phrase)
re.split('\s+|(\s+-*)+', phrase)
re.sub("\s+", "", phrase)
re.sub("\s+", "-", phrase)
re.split("-+", re.sub("\s+", "-", phrase))
re.split("\s+", re.sub("-", " ", phrase))
help(list)
help(str)
import re
def extract_tokens(phrase):
    phrase_list = re.split("\s+", re.sub("-", " ", phrase))
    phrase_tokenized = []
    j = 0
    for i in range(len(phrase_list) - 1):
        j += 1
        phrase_tokenized.append(word)
        if phrase_list[i].isdigit():
            phrase_tokenized[j] += phrase_list[i+1]
            j += 1
            continue
import re
def extract_tokens(phrase):
    phrase_list = re.split("\s+", re.sub("-", " ", phrase))
    phrase_tokenized = []
    j = 0
    for i in range(len(phrase_list) - 1):
        j += 1
        phrase_tokenized.append(word)
        if phrase_list[i].isdigit():
            phrase_tokenized[j] += phrase_list[i+1]
            j += 1
            continue
    return phrase_tokenized
extract_tokens(phrase)
phrase
import re
def extract_tokens(phrase):
    phrase_list = re.split("\s+", re.sub("-", " ", phrase))
    phrase_tokenized = []
    j = 0
    for i in range(len(phrase_list) - 1):
        j += 1
        phrase_tokenized.append(phrase_list[i])
        if phrase_list[i].isdigit():
            phrase_tokenized[j] += phrase_list[i+1]
            j += 1
            continue
    return phrase_tokenized
extract_tokens(phrase)
import re
def extract_tokens(phrase):
    phrase_list = re.split("\s+", re.sub("-", " ", phrase))
    phrase_tokenized = []
    for i in range(len(phrase_list) - 1):
        phrase_tokenized.append(phrase_list[i])
        if phrase_tokenized[-1].isdigit():
            phrase_tokenized[j] += phrase_list[i+1]
            continue
    return phrase_tokenized
extract_tokens(phrase)
def extract_tokens(phrase):
    phrase_list = re.split("\s+", re.sub("-", " ", phrase))
    phrase_tokenized = []
    for i in range(len(phrase_list) - 1):
        phrase_tokenized.append(phrase_list[i])
        if phrase_tokenized[-1].isdigit():
            phrase_tokenized[-1] += phrase_list[i+1]
            continue
    return phrase_tokenized
extract_tokens(phrase)
extract_tokens("abc ABC - - 12 V and ab abc 1,2W")
extract_tokens("abc ABC - - 12 V")
extract_tokens("ab abc 1,2W")
j
re.split("\s+", re.sub("-", " ", "ab abc 1,2W"))
'1,2W'.isdigit()
def extract_tokens(phrase):
    phrase_list = re.split("\s+", re.sub("-", " ", phrase))
    phrase_tokenized = []
    for word in phrase_list:
        phrase_tokenized.append(word)
        if phrase_tokenized[-1].isdigit():
            phrase_tokenized[-1] += word.next()
    return phrase_tokenized
extract_tokens("ab abc 1,2W")
def extract_tokens(phrase):
    phrase_list = re.split("\s+", re.sub("-", " ", phrase))
    phrase_tokenized = []
    for word in phrase_list:
        phrase_tokenized.append(word) if word.isdigit() else phrase_tokenized.append(word, word.next())
    return phrase_tokenized
extract_tokens("ab abc 1,2W")
help(list)
def extract_tokens(phrase):
    phrase_list = re.split("\s+", re.sub("-", " ", phrase))
    phrase_tokenized = []
    for word in phrase_list:
        phrase_tokenized.append(word)
        if phrase_tokenized[-1].isdigit():
            phrase_tokenized[-1] += word.next()
    return phrase_tokenized
extract_tokens("ab abc 1,2W")
extract_tokens("ab abc 1,2 W")
extract_tokens("ab abc 1W")
import re
def extract_tokens(phrase):
    phrase_list = re.split("\s+", re.sub("-", " ", phrase))
    phrase_tokenized = []
    for word in phrase_list:
        phrase_tokenized.append(word)
        if phrase_tokenized[-1].isdigit():
            phrase_tokenized[-1] += word.next()
    return phrase_tokenized
extract_tokens("abc ABC - - 12 V ")
extract_tokens("abc ABC - - 12 V")
def extract_tokens(phrase):
    phrase_list = re.split("\s+", re.sub("-", " ", phrase))
    phrase_tokenized = []
    for word in phrase_list:
        phrase_tokenized.append(word)
        if phrase_tokenized[-1].isdigit():
            phrase_tokenized[-1] += next(word)
    return phrase_tokenized
extract_tokens("abc ABC - - 12 V")
def extract_tokens(phrase):
    phrase_list = re.split("\s+", re.sub("-", " ", phrase))
    phrase_tokenized = []
    for word in iter(phrase_list):
        phrase_tokenized.append(word)
        if phrase_tokenized[-1].isdigit():
            phrase_tokenized[-1] += next(word)
    return phrase_tokenized
extract_tokens("abc ABC - - 12 V")
def extract_tokens(phrase):
    phrase_list = re.split("\s+", re.sub("-", " ", phrase))
    phrase_tokenized = []
    for i in range(1, len(phrase_list)):
        phrase_tokenized.append(phrase_list[i-1])
        if phrase_tokenized[-1].isdigit():
            phrase_tokenized[-1] += phrase_list[i]
    return phrase_tokenized
extract_tokens("abc ABC - - 12 V")
def extract_tokens(phrase):
    phrase_list = re.split("\s+", re.sub("-", " ", phrase))
    phrase_tokenized = []
    for i in range(1, len(phrase_list)):
        phrase_tokenized.append(phrase_list[i-1])
        if phrase_tokenized[-1].isdigit():
            phrase_tokenized[-1] += phrase_list[i]
    return phrase_tokenized
extract_tokens("abc ABC - - 12 V ")
def extract_tokens(phrase):
    phrase_list = re.split("\s+", re.sub("-", " ", phrase))
    phrase_tokenized = []
    for i in range(1, len(phrase_list)):
        phrase_tokenized.append(phrase_list[i-1])
        if phrase_list[i-1].isdigit():
            phrase_tokenized[-1] += phrase_list[i]
    return phrase_tokenized
extract_tokens("abc ABC - - 12 V ")
phrase_list = re.split("\s+", re.sub("-", " ", "abc ABC - - 12 V ")
phrase_list = re.split("\s+", re.sub("-", " ", "abc ABC - - 12 V "))
phrase_list
phrase_list = re.split("\s+", re.sub("-", " ", "abc ABC - - 12 V ").strip())
phrase_list
re.split("\s+", re.sub("-", " ", "abc ABC - - 12 V ").strip())
def extract_tokens(phrase):
    phrase_list = re.split("\s+", re.sub("-", " ", phrase).strip())
    phrase_tokenized = []
    for i in range(1, len(phrase_list)):
        phrase_tokenized.append(phrase_list[i-1])
        if phrase_list[i-1].isdigit():
            phrase_tokenized[-1] += " " + phrase_list[i]
    return phrase_tokenized
extract_tokens("abc ABC - - 12 V ")
'1.2'.isdigit()
'1,2'.isdigit()
help(str)
'1.2'.isnumeric()
help(str)
extract_tokens("abc ABC - - 12V ")
def extract_tokens(phrase):
    phrase_list = re.split("\s+", re.sub("-", " ", phrase).strip())
    phrase_tokenized = []
    n = len(phrase_list)
    for i in range(n):
        phrase_tokenized.append(phrase_list[i])
        if phrase_list[i].isdigit() and i < n-1:
            phrase_tokenized[-1] += " " + phrase_list[i+1]
            continue
    return phrase_tokenized
extract_tokens("abc ABC - - 12V ")
extract_tokens("abc ABC - - 12 V ")
'12 v'.isdigit()
re.split("\s+", re.sub("-", " ", "abc ABC - - 12 V ").strip())
def extract_tokens(phrase):
    phrase_list = re.split("\s+", re.sub("-", " ", phrase).strip())
    phrase_tokenized = []
    n = len(phrase_list)
    while i < n:
        phrase_tokenized.append(phrase_list[i])
        if phrase_list[i].isdigit() and i < n-1:
            phrase_tokenized[-1] += " " + phrase_list[i+1]
            i += 1
        i += 1
    return phrase_tokenized
extract_tokens("abc ABC - - 12 V ")
def extract_tokens(phrase):
    phrase_list = re.split("\s+", re.sub("-", " ", phrase).strip())
    phrase_tokenized = []
    i, n = 0, len(phrase_list)
    while i < n:
        phrase_tokenized.append(phrase_list[i])
        if phrase_list[i].isdigit() and i < n-1:
            phrase_tokenized[-1] += " " + phrase_list[i+1]
            i += 1
        i += 1
    return phrase_tokenized
extract_tokens("abc ABC - - 12 V ")
extract_tokens("abc ABC - - 12 V")
extract_tokens("ab abc 1,2W")
def extract_tokens(phrase, noise="-"):
    phrase_list = re.split("\s+", re.sub(noise, " ", phrase).strip())
    phrase_tokenized = []
    i, n = 0, len(phrase_list)
    while i < n:
        phrase_tokenized.append(phrase_list[i])
        if phrase_list[i].isdigit() and i < n-1:
            phrase_tokenized[-1] += " " + phrase_list[i+1]
            i += 1
        i += 1
    return phrase_tokenized
extract_tokens("abc ABC - - 12 V")
extract_tokens("ab abc 1,2W")
help(str)
def extract_tokens(phrase, noise="-"):
    phrase_list = re.split("\s+", re.sub(noise, " ", phrase).strip())
    phrase_tokenized = []
    i, n = 0, len(phrase_list)
    while i < n:
        phrase_tokenized.append(phrase_list[i])
        if phrase_list[i].isdigit() or re.match(r'^-?\d+(?:\.\d+)?$', phrase_list[i]) and i < n-1:
            phrase_tokenized[-1] += " " + phrase_list[i+1]
            i += 1
        i += 1
    return phrase_tokenized
extract_tokens("abc ABC - - 12 V")
extract_tokens("ab abc 1,2W")
extract_tokens("ab abc 1,2 W")
def extract_tokens(phrase, noise="-"):
    phrase_list = re.split("\s+", re.sub(noise, " ", phrase).strip())
    phrase_tokenized = []
    i, n = 0, len(phrase_list)
    while i < n:
        phrase_tokenized.append(phrase_list[i])
        if phrase_list[i].isdigit() or re.match(r'^-?\d+(?:\.|,\d+)?$', phrase_list[i]) and i < n-1:
            phrase_tokenized[-1] += " " + phrase_list[i+1]
            i += 1
        i += 1
    return phrase_tokenized
extract_tokens("ab abc 1,2 W")
def is_float(s):
    return re.match(r'^-?\d+(?:\.|,\d+)?$', phrase_list[i]) 
def extract_tokens(phrase, noise="-"):
    phrase_list = re.split("\s+", re.sub(noise, " ", phrase).strip())
    phrase_tokenized = []
    i, n = 0, len(phrase_list)
    while i < n:
        phrase_tokenized.append(phrase_list[i])
        if phrase_list[i].isdigit() or is_float(phrase_list[i])and i < n-1:
            phrase_tokenized[-1] += " " + phrase_list[i+1]
            i += 1
        i += 1
    return phrase_tokenized
extract_tokens("ab abc 1,2 W")
def is_float(s):
    return re.match(r'^-?\d+(?:\.|,\d+)?$', s) 
def extract_tokens(phrase, noise="-"):
    phrase_list = re.split("\s+", re.sub(noise, " ", phrase).strip())
    phrase_tokenized = []
    i, n = 0, len(phrase_list)
    while i < n:
        phrase_tokenized.append(phrase_list[i])
        if phrase_list[i].isdigit() or is_float(phrase_list[i])and i < n-1:
            phrase_tokenized[-1] += " " + phrase_list[i+1]
            i += 1
        i += 1
    return phrase_tokenized
extract_tokens("abc ABC - - 12 V")
extract_tokens("ab abc 1,2W")
extract_tokens("ab abc 1,2 W")
extract_tokens("ab abc 1,2    W")
extract_tokens("ab abc 1,2    W   ")
extract_tokens("ab abc 1,2   - W   ")
extract_tokens("ab abc 1,2   - W  -- ")
extract_tokens("ab---------- abc 1,2   - W  -- ")
import os
help(os.listdir)
help(os)
import os
from pathlib import Path
paths = sorted(Path(dirpath).iterdir(), key=os.path.getmtime)
dirpath="."
import os
from pathlib import Path
paths = sorted(Path(dirpath).iterdir(), key=os.path.getmtime)
paths
os.listdir()
Path(dirpath).iterdir()
import os
sorted(os.scandir('/tmp/test'), key=lambda d: d.stat().st_mtime)
sorted(os.scandir('.'), key=lambda d: d.stat().st_mtime)
import os 
os.chdir(directory)
directory="."
import os 
os.chdir(directory)
sorted(filter(os.path.isfile, os.listdir('.')), key=os.path.getmtime)
import math
math.abs
help(math)
city = (52.2319581, 21.0067249)
cities = {'Brwinów': (52.133333, 20.716667), 'Warszawa Bielany': (52.283333, 20.966667), 'Legionowo': (52.4, 20.966667), 'Warszawa-Okęcie': (52.16039, 20.961674), 'Warszawa': (52.280957, 20.961348), 'Belsk Duży': (51.833333, 20.8)}
def distance(first_point, second_point):
    return (first_point[0] - second_point[0])**2 + (first_point[1] - second_point[1])**2
cities_dict = {}
for key, value in cities.items():
    cities_dict[key] = distance(city, value)
cities_dict.sort(key=lambda x: x.value())
cities_dict
help(dict)
sorted(cities_dict, key=lambda x: x.value())
sorted(cities_dict)
city = (52.2319581, 21.0067249)
cities = {'Brwinów': (52.133333, 20.716667), 'Warszawa Bielany': (52.283333, 20.966667), 'Legionowo': (52.4, 20.966667), 'Warszawa-Okęcie': (52.16039, 20.961674), 'Warszawa': (52.280957, 20.961348), 'Belsk Duży': (51.833333, 20.8)}
def distance(first_point, second_point):
    return (first_point[0] - second_point[0])**2 + (first_point[1] - second_point[1])**2
cities_dict = {}
for key, value in cities.items():
    cities_dict[key] = distance(city, value)
{k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[1])}[:3]
city = (52.2319581, 21.0067249)
cities = {'Brwinów': (52.133333, 20.716667), 'Warszawa Bielany': (52.283333, 20.966667), 'Legionowo': (52.4, 20.966667), 'Warszawa-Okęcie': (52.16039, 20.961674), 'Warszawa': (52.280957, 20.961348), 'Belsk Duży': (51.833333, 20.8)}
def distance(first_point, second_point):
    return (first_point[0] - second_point[0])**2 + (first_point[1] - second_point[1])**2
cities_dict = {}
for key, value in cities.items():
    cities_dict[key] = distance(city, value)
[k for k, v in sorted(cities_dict.items(), key=lambda item: item[1])][:3]
city = (52.2319581, 21.0067249)
cities = {'Brwinów': (52.133333, 20.716667), 'Warszawa Bielany': (52.283333, 20.966667), 'Legionowo': (52.4, 20.966667), 'Warszawa-Okęcie': (52.16039, 20.961674), 'Warszawa': (52.280957, 20.961348), 'Belsk Duży': (51.833333, 20.8)}
def distance(first_point, second_point):
    return (first_point[0] - second_point[0])**2 + (first_point[1] - second_point[1])**2
cities_dict = {}
cities_dict = { key: distance(city, value) for key, value in cities.items()}
[k for k, v in sorted(cities_dict.items(), key=lambda item: item[1])][:3]
import math
math.acos
import math
city = (52.2319581, 21.0067249)
cities = {'Brwinów': (52.133333, 20.716667), 'Warszawa Bielany': (52.283333, 20.966667), 'Legionowo': (52.4, 20.966667), 'Warszawa-Okęcie': (52.16039, 20.961674), 'Warszawa': (52.280957, 20.961348), 'Belsk Duży': (51.833333, 20.8)}
def gc-distance(first_point, second_point):
    return math.acos(math.sin(first_point[1]) * math.sin(second_point[1]) + math.cos(first_point[1]) * math.cos(second_point[1]) * math.cos(first_point[0] - second_point[0])
cities_dict = { key: distance(city, value) for key, value in cities.items()}
[k for k, v in sorted(cities_dict.items(), key=lambda item: item[1])][:3]
from math import acos, sin, cos
city = (52.2319581, 21.0067249)
cities = {'Brwinów': (52.133333, 20.716667), 'Warszawa Bielany': (52.283333, 20.966667), 'Legionowo': (52.4, 20.966667), 'Warszawa-Okęcie': (52.16039, 20.961674), 'Warszawa': (52.280957, 20.961348), 'Belsk Duży': (51.833333, 20.8)}
def gc-distance(first_point, second_point):
    return acos(sin(first_point[1]) * sin(second_point[1]) + cos(first_point[1]) * cos(second_point[1]) * cos(first_point[0] - second_point[0])
cities_dict = { key: gc-distance(city, value) for key, value in cities.items()}
[k for k, v in sorted(cities_dict.items(), key=lambda item: item[1])][:3]
def gc-distance(first_point, second_point):
from math import acos, sin, cos
city = (52.2319581, 21.0067249)
cities = {'Brwinów': (52.133333, 20.716667), 'Warszawa Bielany': (52.283333, 20.966667), 'Legionowo': (52.4, 20.966667), 'Warszawa-Okęcie': (52.16039, 20.961674), 'Warszawa': (52.280957, 20.961348), 'Belsk Duży': (51.833333, 20.8)}
def gc_distance(first_point, second_point):
    return acos(sin(first_point[1]) * sin(second_point[1]) + cos(first_point[1]) * cos(second_point[1]) * cos(first_point[0] - second_point[0])
cities_dict = { key: gc-distance(city, value) for key, value in cities.items()}
from math import acos, sin, cos
city = (52.2319581, 21.0067249)
cities = {'Brwinów': (52.133333, 20.716667), 'Warszawa Bielany': (52.283333, 20.966667), 'Legionowo': (52.4, 20.966667), 'Warszawa-Okęcie': (52.16039, 20.961674), 'Warszawa': (52.280957, 20.961348), 'Belsk Duży': (51.833333, 20.8)}
def gc_distance(first_point, second_point):
    return acos(sin(first_point[1]) * sin(second_point[1]) + cos(first_point[1]) * cos(second_point[1]) * cos(first_point[0] - second_point[0])
cities_dict = { key: gc_distance(city, value) for key, value in cities.items()}
[k for k, v in sorted(cities_dict.items(), key=lambda item: item[1])][:3]
def gc_distance(first_point, second_point):
    return acos(sin(first_point[1]) * sin(second_point[1]) + cos(first_point[1]) * cos(second_point[1]) * cos(first_point[0] - second_point[0])
)
def gc_distance(first_point, second_point):
    return acos(sin(first_point[1]) * sin(second_point[1]) + cos(first_point[1]) * cos(second_point[1]) * cos(first_point[0] - second_point[0]))
cities_dict = { key: gc_distance(city, value) for key, value in cities.items()}
[k for k, v in sorted(cities_dict.items(), key=lambda item: item[1])][:3]
from math import acos, sin, cos
def gc_distance(first_point, second_point):
    return acos(sin(first_point[1]) * sin(second_point[1]) + cos(first_point[1]) * cos(second_point[1]) * cos(first_point[0] - second_point[0]))
def three_closest(city, cities):
    cities_distances = { key: gc_distance(city, value) for key, value in cities.items()}
    return [k for k, v in sorted(cities_dict.items(), key=lambda item: item[1])][:3]
city = (52.2319581, 21.0067249)
cities = {'Brwinów': (52.133333, 20.716667), 'Warszawa Bielany': (52.283333, 20.966667), 'Legionowo': (52.4, 20.966667), 'Warszawa-Okęcie': (52.16039, 20.961674), 'Warszawa': (52.280957, 20.961348), 'Belsk Duży': (51.833333, 20.8)}
three_closest(city, cities)
ScoresWithNames = ['Ishaan - 72', 'Jack - 84', 'Bob - 23', 'Louis - 77']
ScoresWithNames.sort(key=lambda x: x.split(" - ")[-1])
ScoresWithNames
from math import acos, cos, sin
def gc_distance(first_point, second_point):
    return acos(sin(first_point[1]) * sin(second_point[1]) + cos(first_point[1]) * cos(second_point[1]) * cos(first_point[0] - second_point[0]))
def three_closest(city, cities):
    cities_distances = { key: gc_distance(city, value) for key, value in cities.items()}
    return [k for k, v in sorted(cities_dict.items(), key=lambda item: item[1])][:3]
    
city = (52.2319581, 21.0067249)
cities = {'Brwinów': (52.133333, 20.716667), 'Warszawa Bielany': (52.283333, 20.966667), 'Legionowo': (52.4, 20.966667), 'Warszawa-Okęcie': (52.16039, 20.961674), 'Warszawa': (52.280957, 20.961348), 'Belsk Duży': (51.833333, 20.8)}
for city in three_closest(city, cities):
 print(city[city])
for result in three_closest(city, cities):
 print(city[city])
three_closest(city, cities)
from math import acos, cos, sin
def gc_distance(first_point, second_point):
    return acos(sin(first_point[1]) * sin(second_point[1]) + cos(first_point[1]) * cos(second_point[1]) * cos(first_point[0] - second_point[0]))
def three_closest(city, cities):
    cities_distances = { key: gc_distance(city, value) for key, value in cities.items()}
    return [k for k, v in sorted(cities_distances.items(), key=lambda item: item[1])][:3]
three_closest(city, cities)
for result in three_closest(city, cities):
    print(result + " : " cities[result])
for result in three_closest(city, cities):
    print(result + " : " + cities[result])
for result in three_closest(city, cities):
    print(result + " : " + str(cities[result]))
import psutil
a = psutil.virtual_memory()
print(a.percent)
X = [[12,7],[4,5],[3,8]]
result = [[0]*len(X)]*len(X[0])
for i in range(len(X)):
    for j in range(len(X[0])):
        result[j][i] = X[i][j]
for r in result:
       print(r)
X = [[12,7],[4,5],[3,8]]
result = [[0]*len(X)]*len(X[0])
for i in range(len(X)):
    for j in range(len(X[0])):
        result[j][i] = X[i][j]
for r in result:
       print(r)
from pyo import *
s = Server()
print("this is not printed")
s.boot()
x = 3.4
print(x,"neither are these")
mylist = [["emi", [["python", "is", "cool"], ["i", "love", "python"]]],
           ["jenne", [["cool", "fun", "home"]]],
           ["lin", [["networking", "is", "hard"], ["i", "hate", "networking"]]],
           ["jim", [["party"]]],
           ["emi", [["i", "love", "machine learning"]]],
           ["jenne", [["homework"]]]]
t = [(200,(b,5),(a,5)),(500,(b,7),(a,3))]
t = [(200,('b',5),('a',5)),(500,('b',7),('a',3))]
t.sort()
t
from math import *
try:
    eval('print(log(e))')
except Exception as e:
    print(e)
try:
    eval('print(long(e))')
except Exception as e:
    print(e)
try:
    eval('log(e)')
except Exception as e:
    print(e)
word_list = ['cat','dog','rabbit']
letter_list = {}
for a_word in word_list:`
   for a_letter in a_word:
     letter_list.add(a_letter)
print(letter_list)
word_list = ['cat','dog','rabbit']
letter_list = {}
for a_word in word_list:
    for a_letter in a_word:
        letter_list.add(a_letter)
print(letter_list)
word_list = ['cat','dog','rabbit']
letter_list = {}
for a_word in word_list:
    for a_letter in a_word:
        letter_list.add(a_letter)
print(list(letter_list))
letter_list = {}
for a_word in word_list:
 for a_letter in a_word:
  letter_list.add(a_letter)
letter_list = set()
for a_word in word_list:
    for a_letter in a_word:
        letter_list.add(a_letter)
print(list(letter_list))
word_list = ['cat','dog','rabbit']
letter_list = set()
for a_word in word_list:
    for a_letter in a_word:
        letter_list.add(a_letter)
print(list(letter_list))
word_list = ['cat','dog','rabbit']
letter_list = set()
for a_word in word_list:
    for a_letter in a_word:
        letter_list.add(a_letter)
print(list(letter_list))
print(list(set("".join(word_list)))
)
print(list(set("".join(word_list))))
print(list({k: 1 for k in "".join(word_list))))
print(list({k: 1 for k in "".join(word_list)))
print(list({k: 1 for k in "".join(word_list))
print(list({k: 1 for k in "".join(word_list)}))
from collections import zip_longest
from itertools import zip_longest
help(zip_longest)
list1=[a,b,c,d]
list2=[d,e,f,g]
list3 = [x-y for x,y in zip(list1,list2)]
list1=['a','b','c','d']
list2=[d,e,f,g]
list2=['d','e','f','g']
list3 = [str(x) + '-' + str(y) for x,y in zip_longest(list1,list2, fillvalue="")]
from itertools import zip_longest
list3 = [str(x) + '-' + str(y) for x,y in zip_longest(list1,list2, fillvalue="")]
list3
[str(x) + '-' + str(y) for x,y in zip_longest(list1,list2, fillvalue="")]
"@".join(["akoudanilo", "gmail.com"])
list_1 = ['1','2','3','4','5','6','7','8']
list_2 = ['n1','n2','n3','n4','n5','n6','n7','n8','n9','n10']
list_3 = ['o1','o2','o3','o4','o5','o6','o7','o8','o9','o10']
from itertools import zip_longest
cols = zip_longest(list_1,list_2,list_3)
cols
with open('file.csv', 'w', newline='') as f:
    thewriter = csv.writer(f)
    thewriter.writerow(['list_1','list_2','list_3'])
    for col in cols:
with open('file.csv', 'w', newline='') as f:
 thewriter = csv.writer(f)
 thewriter.writerow(['list_1','list_2','list_3'])
 for col in cols:
  thewriter.writerow(col)
import csv
with open('file.csv', 'w', newline='') as f:
 thewriter = csv.writer(f)
 thewriter.writerow(['list_1','list_2','list_3'])
 for col in cols:
  thewriter.writerow(col)
from itertools import zip_longest
import random
Start = 1
Stop = 5
limit = 6
[random.randint(Start, Stop) for iter in range(limit)]
random.shuffle(list(range(start, stop+1))
)
start =1
stop = 5
random.shuffle(list(range(start, stop+1)))
help(random)
randomListOfIntegers = allValues + [random.randint(start, stop) for iter in range(limit - stop)]
allValues = random.shuffle(list(range(start, stop+1)))
randomListOfIntegers = allValues + [random.randint(start, stop) for iter in range(limit - stop)]
help(rand.randint)
help(random.randint)
rand
help(random)
import random
Start = 1
Stop = 5
limit = 6
population = list(range(Start, Stop+1))
random.shuffle(population)
population.extend(random.choices(population, limit - stop))
print(population)import random
Start = 1
Stop = 5
limit = 6
population = list(range(Start, Stop+1))
random.shuffle(population)
population.extend(random.choices(population, limit - stop).split(''))
import random
Start = 1
Stop = 5
limit = 6
population = list(range(Start, Stop+1))
random.shuffle(population)
population.extend(random.choices(population, limit - stop).split(''))
random.choices(population, limit - stop)
Start = 1
Stop = 5
limit = 6
population = list(range(Start, Stop+1))
random.shuffle(population)
population.extend(random.choices(population, k=limit-stop).split(''))
Start = 1
Stop = 5
limit = 6
population = list(range(Start, Stop+1))
random.shuffle(population)
population.extend(random.choices(population, k=limit-stop))
print(population)
Start = 1
Stop = 5
limit = 6
RandomListOfIntegers = list(range(Start, Stop+1))
random.shuffle(RandomListOfIntegers)
population.extend(random.choices(RandomListOfIntegers, k=limit-stop))
print(RandomListOfIntegers)
Start = 1
Stop = 5
limit = 6
RandomListOfIntegers = list(range(Start, Stop+1))
random.shuffle(RandomListOfIntegers)
population.extend(random.choices(RandomListOfIntegers, k=limit-Stop+1))
print(RandomListOfIntegers)
random.choices(RandomListOfIntegers, k=limit-Stop+1)
Start = 1
Stop = 5
limit = 6
RandomListOfIntegers = list(range(Start, Stop+1))
random.shuffle(RandomListOfIntegers)
RandomListOfIntegers.extend(random.choices(RandomListOfIntegers, k=limit-Stop+1))
print(RandomListOfIntegers)
Start = 1
Stop = 5
limit = 6
RandomListOfIntegers = list(range(Start, Stop))
random.shuffle(RandomListOfIntegers)
RandomListOfIntegers.extend(random.choices(RandomListOfIntegers, k=limit-Stop+1))
print(RandomListOfIntegers)
Start = 1
Stop = 5
limit = 6
RandomListOfIntegers = list(range(Start, Stop+1))
random.shuffle(RandomListOfIntegers)
RandomListOfIntegers.extend(random.choices(RandomListOfIntegers, k=limit-Stop+1))
print(RandomListOfIntegers)
Start = 1
Stop = 5
limit = 6
RandomListOfIntegers = list(range(Start, Stop+1))
random.shuffle(RandomListOfIntegers)
RandomListOfIntegers.extend(random.choices(RandomListOfIntegers, k=limit-Stop))
print(RandomListOfIntegers)
Start = 1
Stop = 5
limit = 6
RandomListOfIntegers = list(range(Start, Stop+1))
random.shuffle(RandomListOfIntegers)
RandomListOfIntegers.extend(random.choices(RandomListOfIntegers, k=limit-Stop))
print(RandomListOfIntegers)
Start = 1
Stop = 5
limit = 6
RandomListOfIntegers = list(range(Start, Stop+1))
random.shuffle(RandomListOfIntegers)
RandomListOfIntegers.extend(random.choices(RandomListOfIntegers, k=limit-Stop))
print(RandomListOfIntegers)
Start = 1
Stop = 5
limit = 6
RandomListOfIntegers = list(range(Start, Stop+1))
random.shuffle(RandomListOfIntegers)
RandomListOfIntegers.extend(random.choices(RandomListOfIntegers, k=limit-Stop))
print(RandomListOfIntegers)
def name():
 firstnames = ['Jane', 'John', 'Julie']
 surnames = ['Mc Donald', 'Mc Daid', 'Mc Donagh']
 names = {k[0]: k[1] for k in zip(firstnames, surnames)} 
 user_input = raw_input('Enter the surname: ')
 print(names.get(user_input, user_input + " not found ")
def name():
 firstnames = ['Jane', 'John', 'Julie']
 surnames = ['Mc Donald', 'Mc Daid', 'Mc Donagh']
 names = {k[0]: k[1] for k in zip(firstnames, surnames)} 
 user_input = raw_input('Enter the surname: ')
 print(names.get(user_input, user_input + " not found ")
)
def name():
 firstnames = ['Jane', 'John', 'Julie']
 surnames = ['Mc Donald', 'Mc Daid', 'Mc Donagh']
 names = {k[0]: k[1] for k in zip(firstnames, surnames)} 
 user_input = raw_input('Enter the surname: ')
 print(names.get(user_input, user_input + " not found "))
name
name()
input = ("Input dictionary name")
[USER HAS INPUT "exampleDictionary"]
newValue = ("Input new value")
[USER HAS INPUT 5]
exampleDictionary = {
  "value1": 20,
  "value2": 35
}
input["value1"] = newValue
txt = '''food: bacon, eggs, toast
drinks: orange juice, coffee'''
groups = txt.split('\n\n')
[x.split(':')[0] for x in groups]
txt = '''food: bacon, eggs, toast
drinks: orange juice, coffee'''
namelist = [] # initialize namelist
groups = txt.split('\n\n')
for group in groups:
    nameslist.append(group.split(': ').pop(0))
print(groups)
print(nameslist)
nameslist
nameslisttxt = '''food: bacon, eggs, toast
drinks: orange juice, coffee'''
nameslist = [] # initialize namelist
groups = txt.split('\n\n')
for group in groups:
    nameslist.append(group.split(': ').pop(0))
print(groups)
print(nameslist)txt = '''food: bacon, eggs, toast
drinks: orange juice, coffee'''
nameslist = [] # initialize namelist
groups = txt.split('\n\n')
for group in groups:
    nameslist.append(group.split(': ').pop(0))
print(groups)
txt = '''food: bacon, eggs, toast
drinks: orange juice, coffee'''
nameslist = [] # initialize namelist
groups = txt.split('\n\n')
for group in groups:
    nameslist.append(group.split(': ').pop(0))
print(groups)
print(nameslist)
def _execute():
    while True:
        user_input = input("type in: ")
        return user_input
def insertdata(data):
    j = 0
    for i in range(len(listoflist)):
        while j < 2:
            listoflist[i].append(data)
            j += 1
            print(listoflist)
insertdata(_execute())
def insertdata(data):
    j = 0
    for i in range(len(listoflist)):
        while j < 2:
            listoflist[i].append(data)
            j += 1
            print(listoflist)
insertdata(_execute())
1
listoflist = [[],[],[],[],[]] 
def insertdata(data):
    j = 0
    for i in range(len(listoflist)):
        while j < 2:
            listoflist[i].append(data)
            j += 1
            print(listoflist)
insertdata(_execute())
1
2
len(listoflist)
def _execute():
    while True:
        user_input = input("type in: ")
        return user_input
def insertdata(data):
    j = 0
    for i in range(len(listoflist)):
        while j < 2:
            listoflist[i].append(data)
            j += 1
while True:
    insertdata(_execute())
    print(listoflist)
1
2
listoflist = [[],[],[],[],[]]
def _execute():
    while True:
        user_input = input("type in: ")
        return user_input
def insertdata(data):
    j = 0
    for i in range(len(listoflist)):
        j = 0
        while j < 2:
            listoflist[i].append(data)
            j += 1
while True:
    insertdata(_execute())
listoflist = [[],[],[],[],[]]
def _execute():
    while True:
        user_input = input("type in: ")
        return user_input
def insertdata(data):
    j = 0
    for i in range(len(listoflist)):
        j = 0
        while j < 2:
            listoflist[i].append(data)
            j += 1
while True:
    insertdata(_execute())
    print(listoflist)
1
2
listoflist = [[]]
def _execute():
    while True:
        user_input = input("type in: ")
        return user_input
def insertdata(data):
    j = 0
    for i in range(len(listoflist)):
        j = 0
        while j < 2:
            listoflist[i].append(data)
            j += 1
while True:
    insertdata(_execute())
    print(listoflist)
1
2
3
listoflist = []
def _execute():
    while True:
        user_input = input("type in: ")
        return user_input
def insertdata(data):
    for i in range(5):
        listoflist.append([])
        j = 0
        while j < 2:
            listoflist[i].append(data)
            j += 1
while True:
    insertdata(_execute())
    print(listoflist)
1
2
listoflist = []
def _execute():
    while True:
        user_input = input("type in: ")
        return user_input
def insertdata(data):
    for i in range(5):
        listoflist.append([])
        j = 0
        while j < 2:
            listoflist[i].append(data)
            j += 1
insertdata(_execute())
print(listoflist)
listoflist = []
def _execute():
    while True:
        user_input = input("type in: ")
        return user_input
def insertdata(data):
    for i in range(5):
        listoflist.append([])
        j = 0
        while j < 2:
            listoflist[i].append(data)
            j += 1
insertdata(_execute())
1
listoflist
listoflist = [[], [], [], [], []]
def _execute():
    while True:
        user_input = input("type in: ")
        return user_input
def insertdata(data):
    while i < 5:
        if len(listoflist[i]) < 2:
            listoflist[i].append(data)
        else:
            i += 1
while True:
    insertdata(_execute())
    print(listoflist)
1
listoflist = [[], [], [], [], []]
def _execute():
    while True:
        user_input = input("type in: ")
        return user_input
def insertdata(data):
    i = 0
    while i < 5:
        if len(listoflist[i]) < 2:
            listoflist[i].append(data)
        else:
            i += 1
while True:
    insertdata(_execute())
    print(listoflist)
1
2
3
1
listoflist = [[]]
def _execute():
    while True:
        user_input = input("type in: ")
        return user_input
def insertdata(data):
    i = 0
    while i < 5:
        if len(listoflist[i]) < 2:
            listoflist[i].append(data)
        else:
            listoflist.append([data])
while True:
    insertdata(_execute())
listoflist = [[]]
def _execute():
    while True:
        user_input = input("type in: ")
        return user_input
def insertdata(data):
    i = 0
    while i < 5:
        if len(listoflist[i]) < 2:
            listoflist[i].append(data)
        else:
            listoflist.append([data])
while True:
    insertdata(_execute())
    print(listoflist)
1
listoflist
listoflist = [[]]
def _execute():
    while True:
        user_input = input("type in: ")
        return user_input
def insertdata(data):
    i = 0
    while i < 5:
        if len(listoflist[i]) < 2:
            listoflist[i].append(data)
        else:
            listoflist.append([data])
            i += 1
while True:
    insertdata(_execute())
    print(listoflist)
1
2
listoflist = [[]]
def _execute():
    user_input = input("type in: ")
    return user_input
def insertdata(data):
    i = 0
    while i < 5:
        if len(listoflist[i]) < 2:
            listoflist[i].append(data)
        else:
            listoflist.append([data])
            i += 1
while True:
    insertdata(_execute())
    print(listoflist)
1
listoflist = [[]]
def _execute():
    user_input = input("type in: ")
    return user_input
def insertdata(data):
    data_added = False
    i = 0
    while not data_added:
        if len(listoflist[i]) < 2:
            listoflist[i].append(data)
        else:
            listoflist.append([data])
            i += 1
while True:
    insertdata(_execute())
    print(listoflist)
1
listoflist = [[]]
def _execute():
    user_input = input("type in: ")
    return user_input
def insertdata(data):
    data_added = False
    i = 0
    while not data_added:
        if len(listoflist[i]) < 2:
            listoflist[i].append(data)
            data_added = True
        else:
            listoflist.append([data])
            data_added = True
while True:
    insertdata(_execute())
    print(listoflist)
1
2
3
4
5
listoflist = [[], [], [], [], []]
def _execute():
    user_input = input("type in: ")
    return user_input
def insertdata(data):
    data_added = False
    i = 0
    while not data_added:
        if len(listoflist[i]) < 2:
            listoflist[i].append(data)
            data_added = True
        else:
            i += 1
while True:
    insertdata(_execute())
    print(listoflist)
1
2
3
4
1
5
6
1
6
listoflist = [[],[],[],[],[]]
def _execute():
    while True:
        user_input = input("type in: ")
        return user_input
def insertdata(data):
    for l in listoflist:
        if len(l) < 2:
            l.append(data)
            return
    else:
        print("no more space")
while True:
    insertdata(_execute())
    print(listoflist)
1
2
3
4
5
6
1
6
1
23
listoflist = [[], [], [], [], []]
def _execute():
    user_input = input("type in: ")
    return user_input
def insertdata(data):
    data_added = False
    i = 0
    while not data_added and i < len(listoflist):
        if len(listoflist[i]) < 2:
            listoflist[i].append(data)
            data_added = True
        else:
            i += 1
while True:
    insertdata(_execute())
    print(listoflist)
1
2
3
4
5
1
2
3
4
1
2
3
4
55
1
12
1
listoflist = [[], [], [], [], []]
def _execute():
    while True:
        user_input = input("type in: ")
        return user_input
def insertdata(data):
    data_added = False
    i = 0
    while not data_added and i < len(listoflist):
        if len(listoflist[i]) < 2:
            listoflist[i].append(data)
            data_added = True
        else:
            i += 1
    print(listoflist)
insertdata(_execute())
1
2
listoflist = [[], [], [], [], []]
def _execute():
    user_input = input("type in: ")
    return user_input
def insertdata(data):
    data_added = False
    i = 0
    while not data_added and i < len(listoflist):
        if len(listoflist[i]) < 2:
            listoflist[i].append(data)
            data_added = True
        else:
            i += 1
while True:
    insertdata(_execute())
    print(listoflist)
1
2
3
4
5
1
6
1
2
33
4
55
1
2
3
listoflist = [[], [], [], [], []]
def _execute():
    user_input = input("type in: ")
    return user_input
def insertdata(data):
    data_added = False
    i, n = 0, len(listoflist)
    while not data_added and i < n:
        if len(listoflist[i]) < 2:
            listoflist[i].append(data)
            data_added = True
        else:
            i += 1
    if i == n:
        print("\n The list is full \n")
while True:
    insertdata(_execute())
    print(listoflist)
1
2
3
1
5
1
6
7
listoflist = [[], [], [], [], []]
def _execute():
    user_input = input("type in: ")
    return user_input
def insertdata(data):
    data_added = False
    i, n = 0, len(listoflist)
    while not data_added and i < n:
        if len(listoflist[i]) < 2:
            listoflist[i].append(data)
            data_added = True
        else:
            i += 1
    if i == n:
        print("\n The list is full, No more elements will be added \n")
while True:
    insertdata(_execute())
    print(listoflist)
1
2
3
1
5
1
6
1
3
2
4
listoflist = [[], [], [], [], []]
def _execute():
    user_input = input("type in: ")
    return user_input
def insertdata(data):
    data_added = False
    i, n = 0, len(listoflist)
    while not data_added or i < n:
        if len(listoflist[i]) < 2:
            listoflist[i].append(data)
            data_added = True
        else:
            i += 1
    if i == n:
        print("\n The list is full, No more elements will be added \n")
while True:
    insertdata(_execute())
    print(listoflist)
1
def find_their_numbers(files):
    """print it out"""
    file = open(files)
    lines = file.read().splitlines()
    nam = ""
    new_list = []
    for name in lines:
        names = name.split(',')
        for i in range(len(names)):
            if i == 0:
                print(names[i] + ':', end='')
            if i > 0:
                print(names[i])
print_total_scores('test1.txt')
def find_their_numbers(files):
    """print it out"""
    file = open(files)
    lines = file.read().splitlines()
    nam = ""
    new_list = []
    for name in lines:
        names = name.split(',')
        for i in range(len(names)):
            if i == 0:
                print(names[i] + ':', end='')
            if i > 0:
                print(names[i])
print_total_scores('test1.txt')
find_their_numbers('test1.txt')
help(file)
help(splitlines)
help(    with open(text_file) as f:
        lines = file.read().splitlines()
        for line in lines:
            name, total = line.split(', ')[0], sum(int(line.split[0:]))
    with open(text_file) as f:
        lines = file.read().splitlines()
        for line in lines:
            name, total = line.split(', ')[0], sum(int(line.split[0:]))
            print(name + ": " + str(total))def print_total_scores(text_file):
    with open(text_file) as f:
        lines = file.read().splitlines()
def print_total_scores(text_file):
    with open(text_file) as f:
        lines = file.read().splitlines()
        for line in lines:
            name, total = line.split(', ')[0], sum(int(line.split[0:]))
            print(name + ": " + str(total))
print_total_scores('test1.txt')
def print_total_scores(text_file):
    with open(text_file) as f:
        lines = f.read().splitlines()
        for line in lines:
            name, total = line.split(', ')[0], sum(int(line.split[0:]))
            print(name + ": " + str(total))
print_total_scores('test1.txt')
def print_total_scores(text_file):
    with open(text_file) as f:
        lines = f.read().splitlines()
        for line in lines:
            line_splitted = line.split(', ')
            name = line_splitted[0]
            total = sum(int(line.split[0:]))
            print(name + ": " + str(total))
print_total_scores('test1.txt')
def print_total_scores(text_file):
    with open(text_file) as f:
        lines = f.read().splitlines()
        for line in lines:
            line_splitted = line.split(', ')
            name = line_splitted[0]
            total = sum([int(x) for x in line_splitted[0:]])
            print(name + ": " + str(total))
print_total_scores('test1.txt')
def print_total_scores(text_file):
    with open(text_file) as f:
        lines = f.read().splitlines()
        for line in lines:
            line_splitted = line.split(', ')
            name = line_splitted[0]
            total = sum([int(x) for x in line_splitted[1:]])
            print(name + ": " + str(total))
print_total_scores('test1.txt')
def print_total_scores(text_file):
    with open(text_file) as f:
        lines = f.read().splitlines()
        for line in lines:
            line_splitted = line.split(',')
            name = line_splitted[0]
            total = sum([int(x) for x in line_splitted[1:]])
            print(name + ": " + str(total))
print_total_scores('test1.txt')
def print_total_scores(text_file):
    with open(text_file) as f:
        lines = f.read().splitlines()
        for line in lines:
            name, total = line.split(',')[0], sum([int(x) for x in line.split[1:]])
            print(name + ": " + str(total))
print_total_scores('test1.txt')
word_list = "Little fly, Thy summer’s play My thoughtless hand Has brushed away. Am not I A fly like thee? Or art not thou A man like me?"
length_list = len(word_list)
new_word_list = []
for index in range(length_list):
    if len(word_list[index])<=3:
        new_word_list.append(word_list[index].lower())
    elif len(word_list[index])>=7:
        new_word_list.append(word_list[index].upper())
    else:
        new_word_list.append(word_list[index])
new_word_list = " ".join(new_word_list)
print(new_word_list)
poem = "Little fly, Thy summer’s play My thoughtless hand Has brushed away. Am not I A fly like thee? Or art not thou A man like me?"
word_list=poem.split(" ")
print(word_list)
length_list = len(word_list)
new_word_list = []
for index in range(length_list):
    if len(word_list[index])<=3:
        new_word_list.append(word_list[index].lower())
    elif len(word_list[index])>=7:
        new_word_list.append(word_list[index].upper())
    else:
        new_word_list.append(word_list[index])
new_word_list = " ".join(new_word_list)
print(new_word_list)
help(str)
list1 = ['hello', 'world']
list2 = ['hi']
GROUPS = [ ['hello','good'] , ['hello', 'hi', 'etc'], ['hi', 'world', 't'] ]
finded = 0
list_couples = []
for a in list1:
    for b in list2:
        for gr in GROUPS:
            if a in gr and b in gr:
                finded += 1
                list_couples.append(a, b)
                break
from itertools import product
finded = 0
list_couples = []
for gr in GROUPS:
    list_couples.extend([(x[0], x[1]) for x in product(list1, list2) if x[0] in gr and x[1] in gr])
finded = len(list_couples)
from itertools import product
finded = 0
list_couples = []
for gr in GROUPS:
    list_couples.extend([(x[0], x[1]) for x in product(list1, list2) if x[0] in gr and x[1] in gr])
list_couples
help(list)
list1 = ['hello', 'world']
list2 = ['hi']
GROUPS = [['hello','good'], ['hello', 'hi', 'etc'], ['hi', 'world', 't']]
result = [i for i in list(product(list1, list2)) if list(filter(lambda x: i[0] in x and i[1] in x ,GROUPS))]
from itertools import product
list1 = ['hello', 'world']
list2 = ['hi']
GROUPS = [['hello','good'], ['hello', 'hi', 'etc'], ['hi', 'world', 't']]
result = [i for i in list(product(list1, list2)) if list(filter(lambda x: i[0] in x and i[1] in x ,GROUPS))]
result
 = [{'1020': 'ID-2522'}, {'1030': 'ID-2523'}, {'1040': 'ID-2524'}]
ids  = [{'1020': 'ID-2522'}, {'1030': 'ID-2523'}, {'1040': 'ID-2524'}]
data = [{'sf_id': '1020', TotalPrice': '504'}, {'sf_id': '1030', TotalPrice': '400'}, {'sf_id': '1040', TotalPrice': '500'}]
x = 25 * 37
y = 25 *37
id(x)
id(y)
x
x is y
a = 5
b = 2
id(a)
id(b)
a is b
a , b, y
a < b < y
a < b > y
a > b < y
lst = [
        [(3.8, 101.39), (1.597, 103.613), (4.7, 100.83), (4.804, 101.52)],
        [(3.845, 101.396), (1.56, 103.613), (4.71, 100.9), (4.454, 101.161)],
        [(3.847, 101.3), (1.59, 103.63), (4.76, 100.89), (4.45, 101.16)] 
      ]
MT = [[row[i] for row in lst] for i in range(len(lst[0])]
lst = [
        [(3.8, 101.39), (1.597, 103.613), (4.7, 100.83), (4.804, 101.52)],
        [(3.845, 101.396), (1.56, 103.613), (4.71, 100.9), (4.454, 101.161)],
        [(3.847, 101.3), (1.59, 103.63), (4.76, 100.89), (4.45, 101.16)] 
      ]
MT = [[row[i] for row in lst] for i in range(len(lst[0]))]
MT
for line in MT:
    for row in line:
        print(row, end="")
    print()
for line in MT:
    for row in line:
        print(row[0], row[1], end="")
    print()
abc = [
        [(3.8, 101.39), (1.597, 103.613), (4.7, 100.83), (4.804, 101.52)],
        [(3.845, 101.396), (1.56, 103.613), (4.71, 100.9), (4.454, 101.161)],
        [(3.847, 101.3), (1.59, 103.63), (4.76, 100.89), (4.45, 101.16)] 
      ]
transpose = [[row[i] for row in abc] for i in range(len(abc[0]))]
transpose
for line in transpose:
    for row in line:
        print(row[0], row[1], end="")
    print()
abc = [
        [(3.8, 101.39), (1.597, 103.613), (4.7, 100.83), (4.804, 101.52)],
        [(3.845, 101.396), (1.56, 103.613), (4.71, 100.9), (4.454, 101.161)],
        [(3.847, 101.3), (1.59, 103.63), (4.76, 100.89), (4.45, 101.16)] 
      ]
transpose = [[row[i] for row in abc] for i in range(len(abc[0]))]
for line in transpose:
    for row in line:
        print(row[0], row[1], end="")
    print()
transpose
for line in transpose:
    for row in line:
        print(row[0], row[1], end="")
    print()
for line in transpose:
    for row in line:
        print(row[0], row[1], sep=" ", end="")
    print()
for line in transpose:
    for row in line:
        print(row, end="")
    print()
for line in transpose:
    for row in line:
        print(row[0], end="")
    print()
for line in transpose:
    for row in line:
        print(row[0], end=" ")
    print()
for line in transpose:
    for row in line:
        print(row[0], end=" ")
    print()
'
for line in transpose:
    for row in line:
        print(row[1], end=" ")
    print()
for line in transpose:
    for row in line:
        print(row[0], row[1], end=" ")
    print()
a = [(3.8, 101.39)
a
a = (3.8, 101.39)
a
a.flatten()
help(tuple)
abc = [
        [(3.8, 101.39), (1.597, 103.613), (4.7, 100.83), (4.804, 101.52)],
        [(3.845, 101.396), (1.56, 103.613), (4.71, 100.9), (4.454, 101.161)],
        [(3.847, 101.3), (1.59, 103.63), (4.76, 100.89), (4.45, 101.16)] 
      ]
transpose = [[row[i] for row in abc] for i in range(len(abc[0]))]
for line in transpose:
    for row in line:
        print(row[0], row[1], sep=" ", end="")
    print()
for line in transpose:
    for row in line:
        print(row[0], row[1], sep=" ", end=" ")
from collections import Counter
Counter("Tact Coa")
help(Counter)
# User input for first name
while first_name == "":
    first_name = input('Enter FIRST name here: ')
# User input for last name
while last_name == "":
    last_name = input('Enter LAST name here: ')
while first_name == "":
    first_name = input('Enter FIRST name here: ')
def print_name():
    first_name = ""
    last_name = ""
    # User input for first name
    while first_name == "":
        first_name = input('Enter FIRST name here: ')
    # User input for last name
    while last_name == "":
        last_name = input('Enter LAST name here: ')
    print(f'your name is {fname} {lname}')
print_name()
2
a
p = "print('hello world')"
eval(p)
ans = input()
while ans != "login" or ans != 'register':
    print("Please choose the choices given")
    ans = input()
if ans == 'login':
    print('They want to log in')
elif ans == 'register':
    print('They want to register')  
while ans != "login" or ans != 'register':
    print("Please choose the choices given")
    ans = input()
'
d
a
d
v
z
d
q
d
g
a
q
d
a
login
register
while ans != "login" and ans != "register":
    print("Please choose the choices given")
    ans = input()
while "login" not in ans or "register" not in ans:
    print("Please choose the choices given")
    ans = input()
1
d
b
a
login
while "login" not in ans or "register" not in ans:
    ans = input("Please choose the choices given")
ans = ""
while "login" not in ans or "register" not in ans:
    ans = input("Please choose the choices given ")
a
login
register
while "login" not in ans or "register" not in ans:
 ans = input("Please choose the choices given ")
 print(ans)
a
login
while ans not in ["register", "login"]:
    ans = input("Please choose the choices given ")
a
d
login
while ans != "login" and ans != 'register':
 ans = input("Please choose the choices given ")
ans = ""
while ans != "login" and ans != 'register':
 ans = input("Please choose the choices given ")
d
a
login
ans = ""
while ans != "register" and ans != "login":
    ans = input("Please choose the choices given ")
print('They want to ', ans)   
ans = ""
while ans != "register" and ans != "login":
    ans = input("Please choose the choices given ")
ans = ""
while ans != "register" and ans != "login":
    ans = input("Please choose the choices given ")
a
w
b
a
s
d
b
sd
bbsd
b
sd
bdsa
b
sa
bds
b
dsab
sdv
ds
register
UI_score = 0
player_score = 0
UI_score += 1
score_counter = str(UI_score) + "-" + str(player_score)
print(score_counter)
help(csv)
import csv
help(csv.writer)
help(os
)
import os
help(os)
import os
help(os.execl)
import os
help(os.execv)
