a = "\x"
a = "\xb"
a = "\x1b[32m"
a
exit()
if "":
	print("Just to verify")
exit()
help(list)
exit()
help(list)
for i in range(3, 3):
	print("just a test")
for i in range(2, 3):
	print("just a test")
exit()
for i in range(3, 4):
	print(f"{i}")
if -1:
	print("c;est dangeruex")
exit
for i in range(4, 4):
	print("tsh")
import codecs, os;__pyfile = codecs.open('''/tmp/pybYqmT4''', encoding='''utf-8''');__code = __pyfile.read().encode('''utf-8''');__pyfile.close();os.remove('''/tmp/pybYqmT4''');exec(compile(__code, '''/tmp/pybYqmT4''', 'exec'));
help(dict)
dict = {a:1, b:2, c:3}
dict = {"a":1, "b":2, "c":3}
for node, edges in dict:
	print(f"{node}:{edges}")
for node, edges in dict.iteritems():
	print(f"{node}:{edges}")
dicto = {"a":1, "b":2, "c":3}
for node, edges in dicto:
	print(f"{node}:{edges}")
for node, edges in dicto.iteritems():
	print(f"{node}:{edges}")
for node, edges in dicto.iter():
	print(f"{node}:{edges}")
exit
exit()
1610/9
clear
subprocess.check_output("clear")
64/556
64*556
import ipywidget
import ipywidgets
from ipywidgets import interact
349*656
import os
os.path.expanduser("~")
os.path.join(os.path.expanduser("~"), "Downloads", "Mathe", "Picture.png")
bb = os.path.join(os.path.expanduser("~"), "Downloads", "Mathe", "Picture.png")
os.path.isfile(bb)
import numpy as np
list_of_genres = ['Adventure', 'Animation', 'Children', 'Comedy', 'Fantasy', 'Drama', 'Romance', 'Action', 'Thriller', 'Sci-Fi', 'Crime', 'Horror', 'Mystery', 'IMAX', 'Documentary', 'War', 'Musical', 'Western', 'Film-Noir']
my_genre = ['Action', 'Crime', 'Drama', 'Thriller']
idx = [1 if g in my_genre else 0 for g in list_of_genres]
out_arr = np.asarray(idx)
out_arr
idx
import subprocess
subprocess.run(["ls"]).stdout
subprocess.run(["ls"]).stdout.readline()
from numpy.random import choice as weighted_choice
import numpy
import os
import subprocess
import pandas
import numpy
import pandas
import numpy
from numpy.random import choice as weighted_choice
from numpy.random import choice
from numpy.random import Choice
from numpy.random import choice
from numpy.random import Choice
from numpy.random import choice
import numpy.random
from numpy.random import choice
import random
random.seed()
length = 10
10**length
10**length-1
9*10**length + (10**length-1)
def random_seed(length):
  min = 10**length
  max = 9*min + (min-1)
  return random.randint(min, max)
random_seed(10)
def random_seed(length):
  min = 10**(length-1)
  max = 9*min + (min-1)
  return random.randint(min, max)
random_seed(10)
random_seed(9)
length=random.randint(1,30)
chars=[char for char in '0123456789abcdefghijklmnopqrstuvwxyz']
print(chars)
seed=''
for i in range(length): seed=seed+random.choice(chars)
print(seed)
random.seed()
random.choice('0123456789abcdefghijklmnopqrstuvwxyz')
def random_seed(length):
  r_string = ''
  for _ in range(length):
    r_string += random.choice('0123456789abcdefghijklmnopqrstuvwxyz')
  return r_string
random_seed(10)
import os
os.urandom(16)
os.random(16)
hash = random.getrandbits(128)
print("hash value: %032x" % hash)
]
l = [random.choice('0123456789abcdefghijklmnopqrstuvwxyz')
]*10
l
l = [random.choice('0123456789abcdefghijklmnopqrstuvwxyz');random.seed()]*10
def r_letter():
  return random.choice('0123456789abcdefghijklmnopqrstuvwxyz')
l = [None]*10
map(r_letter(), l)
list(map(r_letter(), l))
def r_letter(flag):
  return random.choice('0123456789abcdefghijklmnopqrstuvwxyz')
list(map(r_letter(), l))
list(map(r_letter(None), l))
list(map(r_letter, l))
str(map(r_letter, l))
list(map(r_letter, l))
choices = '0123456789abcdefghijklmnopqrstuvwxyz'
def random_char():
   return random.choice(choices)
def random_seed(length):
  l = [None]*length
  random.seed()
  return "".join(list(map(random_char, l)))
random_seed(10)
def random_char():
   return random.choice('0123456789abcdefghijklmnopqrstuvwxyz')
def random_seed(length):
  l = [None]*length
  random.seed()
  return "".join(list(map(random_char, l)))
random_seed(10)
def random_char(flag):
   return random.choice('0123456789abcdefghijklmnopqrstuvwxyz')
random_seed(10)
choices = '0123456789abcdefghijklmnopqrstuvwxyz'
def random_char(flag):
   return random.choice(choices)
random_seed(10)
random_seed(111)
import random
choices = '0123456789abcdefghijklmnopqrstuvwxyz'
def random_char(ctrl):
   return random.choice(choices)
def random_seed(length):
  l = [None]*length
  random.seed()
  return "".join(list(map(random_char, l)))
random_seed(1)
random_seed(0)
random_seed(3)
def random_seed(length):
  os.urandom(length)
  map(ord, os.urandom(length))
random_seed(10)
import os
def random_seed(length):
  os.urandom(length)
  return map(ord, os.urandom(length))
random_seed(10)
import os
def random_seed(length):
  os.urandom(length)
  return "".join(list(map(ord, os.urandom(length))))
random_seed(10)
import os
def random_seed(length):
  return "".join(list(map(ord, os.urandom(length))))
random_seed(5)
map(ord, os.urandom(10))
list(map(ord, os.urandom(10))
)
help ord
help(ord)
digits = ["zero", "one", "two", "three", "four", "five", 
          "six", "seven", "eight", "nine"]
def to_number(nb):
  return digits[nb]
def list_numbers_in_words(n):
  b = str(n)
  return list(map(to_number(nb), b)
digits = ["zero", "one", "two", "three", "four", "five", 
          "six", "seven", "eight", "nine"]
def to_number(nb):
  return digits[nb]
def list_numbers_in_words(n):
  b = str(n)
  return list(map(to_number(nb), b)
digits = ["zero", "one", "two", "three", "four", "five", 
          "six", "seven", "eight", "nine"]
def to_number(nb):
  return digits[nb]
def list_numbers_in_words(n):
  b = str(n)
  return list(map(to_number(nb), b))
list_numbers_in_words(132421)
def list_numbers_in_words(n):
  b = str(n)
  return list(map(to_number, b))
list_numbers_in_words(132421)
def list_numbers_in_words(n):
    ns = str(n)
    single_digits = ["zero", "one", "two", "three",  
                     "four", "five", "six", "seven",  
                     "eight", "nine"]
    return [
        single_digits[int(nsi)]
        for nsi in ns
    ]
list_numbers_in_words(132421)
tokenizer = RegexpTokenizer (r'\w+')
career_df['How could the conversation have been more useful?']= career_df['How could the conversation have been more useful?'].apply(lambda x:tokenizer.tokenize(x.lower()))
def calc_cost -> float:
def calc_cost() -> float:
  return "test"
calc_cost
calc_cost()
def setZeroes(self, A):
  for i in A:
import os
os.listdir()
type(os.listdir())
files.os.listdir().pop('.fotoxx')
os.listdir().pop('.fotoxx')
os.listdir().remove('.fotoxx')
print(os.listdir().remove('.fotoxx'))
os.listdir()
files = os.listdir
files
files.remove(".cabal")
l = ["a
l = ["a", "b", "c"]
l.remove("b")
l
files = os.listdir()
files
files.remove(".fotoxx")
files
help(list.remove)
help(list)
a = "1234"
return 2*sum(map(lambda x:int(x), a))
2*sum(map(lambda x:int(x), a))
def adddigitsinstring(dig):
  return 2*sum(map(lambda x:int(x), dig))
adddigitsinstring("324124321")
adddigitsinstring("31")
adddigitsinstring("313")
adddigitsinstring("9")
import cv2
img = cv2.imread(args.img_path)
img = cv2.imread("/home/rufus/Pictures/Whatsapp_profile.PNG")
cv2.imshow('image', img)
cv2.imshow('image', img); print(img)
cv2.imshow('image', img); cv2.waitKey(0)
cv.destroyAllWindows()
cv2.destroyAllWindows()
a =251+252+245
a/3
help(sum)
help(mean)
help(avg)
help(average)
help(sum)
a = [1, 2, 3]
reduce(lambda x: x/3, a)
sum(map(lambda x:x/3, a))
version()
import sys
sys.version_info
help(venv)
venv
import sys
sys.path
venv
a = aaa
a = "aaa"
b = "bbb"
tmp = a[-1]
tmp
def perm_concatenate(a, b):
  tmp = a[-1]
  a[-1] = b[0]
  b[0] = tmp
  return a + b
perm_concatenate(a, b)
help(str)
a[:-1]
c = "fed"
c[:-1]
c[0:]
c[1:]
def perm_concatenate(a, b):
  return a[:-1] + b[0] + a[-1] + b[1:]
perm_concatenate(a, b)
a = 'aa', 'bb'
a
a[0]
a[1]
def perm_concatenate(a):
  return a[0][:-1] + a[1][0] + a[0][-1] + a[1][1:]
perm_concatenate(a)
def myreduce(func, lst):
    x = 0
    x1 = x + 1
    result = lst[x]
    while x1 < len(lst):
        applyfunc = func(result, lst[x1]) #This is the line in question
        result = applyfunc
        x += 1
        x1 += 1
    return round(result, 1)
print(myreduce('`complex`', [3, -1, 4.5, 23, 10]))
print(myreduce(complex, [3, -1, 4.5, 23, 10]))
a = [1, 1, 5, 1, 2, 4, 3]
Counter(a)
import Counter
help(counter)
help(Counter)
ranger(-5, 5)
range(-5, 5)
print(range(-5, 5))
a = range(-5, 5)
a
print(a)
a = "a very long text without as"
list(filter(lambda car: car != 'a', a))
"".join(list(filter(lambda car: car != 'a', a)))
import this
a = [1,2, 4, 1, 2]
a.pop
a.pop()
help(list)
a.insert(0, a.pop())
a
a.insert(0, a.pop())
a
help(list)
a.reverse()
a
a = [1,1,1,2,2,3]
2
a
from collections import Counter 
b = Counter(a)
b
b.keys()
from collections import Counter 
c = [1]
d = Counter(c)
d
a = [3,0,1,0]
1
a
b = Counter(a)
b
for i in b.keys():
  print(i)
b = ordered(Counter(a))
b = ord(Counter(a))
help(dict)
a="ctintcdctccc" 
Counter(a)
from collections import Counter
Counter(a)
for i in b:
  a="ctintcdctccc"  
i=0
j=0
char=""
while i<len(a)-1:
    while j<len(a)-1:
        if a[i]==a[j+1]:
            char=char+a[i]
        j+=1
    i+=1
print(char)
a="ctintcdctccc"  
char = {}
for i in a:
    if i in char:
        char[i] += 1
    else:
        char[i] = 0
char
for i in char:
 print(i)
for i in char:
 print(i.value)
i = "absdb"
i[5]
a = [[1,2],[3,4]]
a[0,1]
a[0][1]
board_ = [[[0]*N]*N]
N = 5
board_ = [[[0]*N]*N]
board_
        board_ = [[0]*N]*N
board_ = [[0]*N]*N
board_
board_[0].count(0)
       initial = ["(", ")"]*n
initial = ["(", ")"]*n
initial = ["(", ")"]*4
initial
help(str)
help(list)
a = []
a is None
a == []
def parenthesis(A=[])
    def generate_all_parenthesis(self, A, n):
        if len(A) == 2*n:
            ans.append("".join(A))
        else:
            A.append('(')
            generate(A, n)
            A.pop()
            A.append(')')
            generate(A, n)
    def generate_all_parenthesis(A=[], n):
        if len(A) == 2*n:
            ans.append("".join(A))
        else:
            A.append('(')
            generate(A, n)
            A.pop()
            A.append(')')
            generate(A, n)
a = "adsf;lkajfd"
a.pop()
help(str)
a = "adsf;lkajfd"
a[::-1]
a[:-1]
a[:-2]
a[:2]
a[2:]
reduce 
package='gekko'
import pip
if hasattr(pip, 'main'):
    from pip import main as pipmain
else:
    from pip._internal import main as pipmain
pipmain(['search','gekko'])
package = 'gekko'
import pip
from pip import main as pipmain
from pip._internal import main as pipmain
pipmain(['search', package])
pipmain(['search', 'lxml'])
a = pipmain(['search', 'lxml'])
help(str)
a
a = pipmain(['search', 'lxml'])
a
import pip
import subprocess
import json
import urllib.request
from pip._internal.operations.freeze import freeze
if hasattr(pip, 'main'):
    from pip import main as pipmain
else:
    from pip._internal import main as pipmain
def isLatestVersion(pkgName):
    # Get the currently installed version
    current_version = ''
    for requirement in freeze(local_only=False):
        pkg = requirement.split('==')
        if pkg[0] == pkgName:
            current_version = pkg[1]
    # Check pypi for the latest version number
    contents = urllib.request.urlopen(F'https://pypi.org/pypi/{pkgName}/json').read()
    data = json.loads(contents)
    latest_version = data['info']['version']
    return latest_version == current_version
import pip
import subprocess
import json
import urllib.request
from pip._internal.operations.freeze import freeze
if hasattr(pip, 'main'):
    from pip import main as pipmain
else:
    from pip._internal import main as pipmain
def isLatestVersion(pkgName):
    # Get the currently installed version
    current_version = ''
    for requirement in freeze(local_only=False):
        pkg = requirement.split('==')
        if pkg[0] == pkgName:
            current_version = pkg[1]
    # Check pypi for the latest version number
    contents = urllib.request.urlopen(F'https://pypi.org/pypi/{pkgName}/json').read()
    data = json.loads(contents)
    latest_version = data['info']['version']
import pip
import subprocess
import json
import urllib.request
from pip._internal.operations.freeze import freeze
if hasattr(pip, 'main'):
    from pip import main as pipmain
else:
    from pip._internal import main as pipmain
def isLatestVersion(pkgName):
    # Get the currently installed version
    current_version = ''
    for requirement in freeze(local_only=False):
        pkg = requirement.split('==')
        if pkg[0] == pkgName:
            current_version = pkg[1]
    contents = urllib.request.urlopen(F'https://pypi.org/pypi/{pkgName}/json').read()
    latest_version = data['info']['version']
    return latest_version == current_version
a = [0] * 3
a
for i in range(5, 1):
    print(i)\
for i in range(5, 1):
    print(i)
for i in range(5, 1):
  print(i)
def test():
  for i in range(5, 1):
    print(i)
for i in range(5):
    print(i)
range(5)
print(range(5))
for i in range(5):
    print(i)
a = [22, 31]
a[0], a[1] = a[1], a[0]
a
for i in range(1, 3):
	print(i)
a = [22, 31]
len(a)
a = [22, 31]
a[-1]
a = [22, 31]
b = [0]
a + b
a = [22, 31]
a + b
b = [0]
b = [[0]]
a + b
a = [22, 31]
a[0,]
[0,]*5
    def countBits(self, num):
        """
        :type num: int
        :rtype: List[int]
        """
        dp = [0,] * (num+1)
        dp[0] = 0
        if(num>0):
            dp[1] = 1
        curr = 2
        for i in range(2,num+1):
            if(i==curr*2):
                curr = curr * 2
            
            dp[i] = dp[i%curr] + 1
            
def countBits(self, num):
        dp = [0,] * (num+1)
        dp[0] = 0
        if(num>0):
            dp[1] = 1
        curr = 2
        for i in range(2,num+1):
            if(i==curr*2):
                curr = curr * 2
            dp[i] = dp[i%curr] + 1
def countBits(self, num):
        dp = [0,] * (num+1)
        dp[0] = 0
        if(num>0):
            dp[1] = 1
        curr = 2
        for i in range(2,num+1):
            if(i==curr*2):
                curr = curr * 2
            dp[i] = dp[i%curr] + 1
ef countBits(self, num):
def countBits(self, num):
        dp = [0,] * (num+1)
        dp[0] = 0
        if(num>0):
            dp[1] = 1
        curr = 2
        for i in range(2,num+1):
            if(i==curr*2):
                curr = curr * 2
            dp[i] = dp[i%curr] + 1
        return dp
countBits(6)
def countBits(num):
        dp = [0,] * (num+1)
        dp[0] = 0
        if(num>0):
            dp[1] = 1
        curr = 2
        for i in range(2,num+1):
            if(i==curr*2):
                curr = curr * 2
            dp[i] = dp[i%curr] + 1
        return dp
countBits(6)
help(zip)
a = "al;falskjfd"
set(a)
b = {}
b[a] = 0
a
c = al;falskfja
c = "al;falskfja"
c
b[c] = 1
b[a]
b[c]
a
c
e = 'aflals;kjfd'
e
b[e] = 1
b[a]
b[e]
a
e
a = {}
b = {}
a = set("abcdef")
b = set("defabc")
a ==b
a
b
c[a] = 0
c = {}
c[a] = 0
str(a) = str(b) 
str(a) == str(b) 
str(a)
str(b)
help{dict}
help{dict)
help(dict)
a = "ape"
b = "pea"
set(a) == set(b)
str(set(a)) == str(set(b))
str(set(a))
str(set(b))
a = [72, 71, 17, 234]
enumerate(a)
print(enumerate(a))
for i, j in enumerate(a):
  print(a)
for i, j in enumerate(a):
  print(i)
help(max)
a = [72, 71, 17, 234]
a[:]
4096/2
10^-10
10**-10
1e-10
e-10
verify
help(list)
a = [[12, 32], [1, 4]]
b = [1, 0]
a[b]
help(list)
raise(ValueError)
raise(ValueErro)
a = [[12, 32], [1, 4]]
a[0:]
a[0][0]
help(dict)
l = {}
l[1] = 2
l
l[1,2] = 2
l
import math
import random
from random import randint
for i in range(50):
    value = random.randint(1,50)
    print(math.floor(value))
def rand():
for i in range(4):
 print(i)
for i in range(1, 4):
 print(i)
import math
import random
from random import randint
def rand50():
    for i in range(1, 51):
        value = random.randint(1, i)
        print(math.floor(value))
rand50()
def rand50():
    for i in range(2, 51):
        value = random.randint(1, i)
        print(math.floor(value))def rand50():
    for i in range(2, 51):
        value = random.randint(1, i)
        print(math.floor(value))
def rand50():
    for i in range(2, 51):
        value = random.randint(1, i)
        print(math.floor(value))
rand50()
def rand50():
    for i in range(2, 51):
        value = random.randint(1, i)
        print(math.floor(value))def rand50():
    for i in range(2, 51):
        value = random.randint(1, i)
        print(value)
def rand50():
    for i in range(2, 51):
        value = random.randint(1, i)
        print(value)
rand50()
import random
from random import randint
for i in range(2, 51):
    value = random.randint(1, i)
    print(value)
data = [[
        "A 5408599",
        "B 8126880",
        "A 2003529",
    ],
    [
        "C 9925336",
        "C 3705674",
        "A 823678571",
        "C 3205170186",
    ],
    [
        "C 9772980",
        "B 8960327",
        "C 4185139021",
        "D 1226285245",
        "C 2523866271",
        "D 2940954504",
        "D 5083193",
    ]]
temp_dict = {
    item: index for index, sublist in enumerate(data)
        for item in sublist
}
print(data[temp_dict["C 9772980"]])
a = 'dl;kasdf'
a.index(1)
a.index('1')
a.index('d')
help(str)
a = 'dl;kasdf'
a.pop(2)
list(a).pop(2)
a
b = list(a)
b.pop(2)
b
a = 'dl;kasdf'
b in a
i = iter(a)
i
i.next()
i.__next__()
import printf
printf
rdd = sc.parallelize(["b", "a", "c"])
import spark
import pyspark
rdd = sc.parallelize(["b", "a", "c"])
from pyspark import SparkFiles
rdd = sc.parallelize(["b", "a", "c"])
sc = SparkContext()
from pyspark import SparkContext
sc = SparkContext()
rdd = sc.parallelize(["b", "a", "c"])
sorted(rdd.map(lambda x: (x, 1)).collect())
type(sorted(rdd.map(lambda x: (x, 1)).collect()))
type(rdd.map(lambda x: (x, 1)).collect())
import lxml
import django
import dmidecode
from pprint import pprint
def getBIOS():
    for v in dmidecode.bios().values():
        if type(v) == dict and v['dmi_type'] == 0:
            BIOSdict["Name"] = str((v['data']['Vendor']))
            BIOSdict["BuildNumber"] = str((v['data']['Version']))
            BIOSdict["SoftwareElementID"] = str((v['data']['BIOS Revision'])
)
getBIOS
getBIOS()
import dmidecode
from pprint import pprint
def getBIOS():
    for v in dmidecode.bios().values():
        if type(v) == dict and v['dmi_type'] == 0:
            BIOSdict["Name"] = str((v['data']['Vendor']))
            BIOSdict["BuildNumber"] = str((v['data']['Version']))
            BIOSdict["SoftwareElementID"] = str((v['data']['BIOS Revision'])
)
getBIOS()
return getBIOS()
print(getBIOS())
import dmidecode
    for v in dmidecode.bios().values():
        if type(v) == dict and v['dmi_type'] == 0:
            BIOSdict["Name"] = str((v['data']['Vendor']))
            BIOSdict["BuildNumber"] = str((v['data']['Version']))
for v in dmidecode.bios().values():
    if type(v) == dict and v['dmi_type'] == 0:
        BIOSdict["Name"] = str((v['data']['Vendor']))
        BIOSdict["BuildNumber"] = str((v['data']['Version']))
        BIOSdict["SoftwareElementID"] = str((v['data']['BIOS Revision']))
print(BIOSdict)
BIOSdict
dmidecode.bios()
help(dmidecode)
dmidecode
help(dmidecode)
dmidecode.bios()
help(dmidecode)
dmidecode.xmlapi
dmidecode.xmlapi()
dmidecode.xmlapi("bios")
dmidecode.xmlapi("Name")
dmidecode.xmlapi("Name", str)
dmidecode.xmlapi("data", "Vendor")
import utils
tmp = tempfile.NamedTemporaryFile(mode='w')
import tempfile
tmp = tempfile.NamedTemporaryFile(mode='w')
tmp.name
tmp.write("print('This works')")
import subprocess 
subprocess.check_output(tmp.name)
help(subprocess.check_output())
help(subprocess)
help(tempfile)
tmp.write("print('what the fuck')")
tmp.close()
tmp.name
os.path.join(tempfile.gettempdir())
import os
os.path.join(tempfile.gettempdir())
help(subprocess.Popen)
import subprocess
help(subprocess.Popen)
help(random)
import random
help(random)
import wx
a = [1, 3, 2]
a.sort()
a
type(8)
type(8) == "int"
type(8) == type(0,8)
type(8) == type(0.8)
import os
help(os)
help(os)
os.path(".)
os.path("."0
os.path(".")
help(os)
os.fspath(".)
os.fspath(".")
os.getcwd()
os.pause
import os
os.pause
os.wait
os.wait(50)
import date
import dateutil
help(dateutil)
date
import configparser
CONF = configparser.ConfigParser()
CONF.add_section("test")
with mouse.Listener(
        on_move=on_move,
        on_click=on_click,
        on_scroll=on_scroll) as listener:
    listener.join()
from pynput import mouse
from pynput import keyboard
for i in keyboard.Key:
 print(i)
a = "as;dklfjsa"
print(f"Je suis presque sur que je serais decu {a}")
print(f"Je suis presque sur que je serais decu '{a}'")
import pynput
from pynput import keyboard
keyboard.Key
for i in keyboard.Key:
 print(i)
import platform
platform.system()
import pyautogui
help(pyautogui)
from pynput import keybaord
from pynput import keyboard
keyboard.Key
for i in keyboard.Key:
 print(i)
print('^')
print('@')
a = ""
if a:
 print("hum")
if a:
 print("hum")
if not a:
 print("hum")
if 0:
 print("d;fak")
def print_prime_factors(number):
  # Start with two, which is the first prime
  factor = 2
  # Keep going until the factor is larger than the number
  while factor <= number:
    # Check if factor is a divisor of number
    if number % factor == 0:
      # If it is, print it and divide the original number
      print(factor)
      number = number / factor
    else:
      # If it's not, increment the factor by one
      factor += 1
  return "Done"
print_prime_factors(100) # Should print 2,2,5,5
def is_power_of_two(n):
  # Check if the number can be divided by two without a remainder
  while n % 2 == 0:
    n = n / 2
  # If after dividing by two the number is 1, it's a power of two
  if n == 1:
    return True
  return False
is_power_of_two(40
is_power_of_two(4)
is_power_of_two(40)
is_power_of_two(0)
is_power_of_two(-2)
def is_power_of_two(n):
  # Check if the number can be divided by two without a remainder
  if n == 0:
    return False
  while n % 2 == 0:
    n = n / 2
  # If after dividing by two the number is 1, it's a power of two
  if n == 1:
    return True
  return False
is_power_of_two(0)
def factorial(n):
    result = 1
    for x in range(n+1):
        result *= x
    return result
for n in range(10):
    print(n, factorial(n))
factorial(1)
def loop(start, stop, step):
	return_string = ""
	if step == 0:
		step = 1 if start < stop else -1
	if start < stop:
		step = abs(step) * -1
	else:
		step = abs(step)
	for count in range(start, stop, step):
		return_string += str(count) + " "
	return return_string.strip()
print(loop(11,2,3)) # Should be 11 8 5
print(loop(1,5,0)) # Should be 1 2 3 4
print(loop(-1,-2,0)) # Should be -1
print(loop(10,25,-2)) # Should be 10 12 14 16 18 20 22 24 
print(loop(1,1,1)) # Should be empty
loop(1, 2, 0)
loop(1, 5, 0)
a = 3 if True else 4
b = 3 if False else 4
bb
b
for x in range(10):
    for y in range(x):
        print(y)
y
if " ":
 print('tes nique')
Medric = "Medric"
Medric.lover()
"Medric".lover()
help(str)
dictionnary = {a:[1,2,3], b:[13,423]}
dictionnary = {"a":[1,2,3], "b":[13,423]}
for key, value in dictionnary:
 print(key)
for key, value in dictionnary.items():
 print(key)
def combine_lists(list1, list2):
  # Generate a new list containing the elements of list2
  # Followed by the elements of list1 in reverse order
  return list2.extend(list1.reverse())
  
	
Jamies_list = ["Alice", "Cindy", "Bobby", "Jan", "Peter"]
Drews_list = ["Mike", "Carol", "Greg", "Marcia"]
print(combine_lists(Jamies_list, Drews_list))
def combine_lists(list1, list2):
  # Generate a new list containing the elements of list2
  # Followed by the elements of list1 in reverse order
  return list2.extend(list1.reverse())
  
	
Jamies_list = ["Alice", "Cindy", "Bobby", "Jan", "Peter"]
Drews_list = ["Mike", "Carol", "Greg", "Marcia"]
print(combine_lists(Jamies_list, Drews_list))
def combine_lists(list1, list2):
  # Generate a new list containing the elements of list2
  # Followed by the elements of list1 in reverse order
  return list2.extend(list1.reverse())
def combine_lists(list1, list2):
 print(list1)
 print(list2)
 print(type(list1))
 print(type(list2))
Jamies_list = ["Alice", "Cindy", "Bobby", "Jan", "Peter"]
Drews_list = ["Mike", "Carol", "Greg", "Marcia"]
print(combine_lists(Jamies_list, Drews_list))
def combine_lists(list1, list2):
 list2.__len__()
print(combine_lists(Jamies_list, Drews_list))
def combine_lists(list1, list2):
 return list2.__len__()
print(combine_lists(Jamies_list, Drews_list))
Jamies_list.reverse()
print(Jamies_list.reverse())
help(list)
reverse(Drews_list)
reversed(Drews_list)
Jamies_list
Drews_list
Jamies_list.reverse()
Jamies_list
a = list(Drews_list, Jamies_list)
help(str)
a = dict(int)
a = dict(str, int)
colors = ["red", "white", "blue"]
colors.insert(2, "yellow")
colors
animal = "Hippopotamus"
animal[3:6]
import requests
requests.get("http://www.google.com")
type(requests.get("http://www.google.com"))
from pptx import Presentation
from pptx.chart.data import ChartData
shape = slide_11.shapes[5]
ReachChart= shape.chart
reach_data = ChartData()
reach_data .categories = ['reach 1', 'reach 2']
reach_data .add_series('series', tuple(3.145, 7.526))
from pptx import Presentation
from pptx.chart.data import ChartData
shape = slide_11.shapes[5]
reach_data = ChartData()
reach_data .categories = ['reach 1', 'reach 2']
reach_data .add_series('series', tuple(3.145, 7.526))
reach_data.add_series('series', tuple(3.145, 7.526))
reach_data = ChartData()
reach_data.add_series('series', tuple(3.145, 7.526))
from pptx import Presentation
from pptx.chart.data import ChartData
reach_data = ChartData()
reach_data.categories = ['reach 1', 'reach 2']
reach_data.add_series('series', tuple(3.145, 7.526))
reach_data.add_series('series', tuple((3.145, 7.526)))
ReachChart.replace_data(reach_data)
help(pptx.chart.series)
import pptx
help(pptx.chart.series)
import subprocess
dir()
subprocess.Popen("ls", shell=True)
subprocess.Popen(["ls"], shell=True)
help(subprocess)
"{:04.1f}".format(number).replace(".0", "")
number1 = 3.0
number2 = 3.5
numer1
number1
isint(number1)
help(int)
3 == 3.0
number1 == math.ceil()
import math
number1 == math.ceil()
number1 == math.ceil(number1)
def integral_formatting(n):
    return n if n != math.ceil(n) else return math.ceil(n)
number1 = 3.0
number2 = 3.5
def integral_formatting(n):
    return n if n != math.ceil(n) else math.ceil(n)
integral_formatting(number1)
integral_formatting(number2)
import pptx
help(DataLabels)
help(AreaSeries)
help(pptx.chart.data)
help(pptx.chart)
help(pptx.chart.data.AreaSeries)
help(pptx.chart)
help(pptx.chart.datalabel)
help(pptx.chart.datalabel.TextFrame)
from datetime import date
from os import path
yesterday = int(date.today().strftime("%d"))
name = "pdf" + str(yesterday) + date.today().strftime("%d-%m-%Y"))
name = "pdf" + str(yesterday) + date.today().strftime("%d-%m-%Y")
name
from datetime import date
from os import path
yesterday = int(date.today().strftime("%d"))
name = "pdf " + str(yesterday) + date.today().strftime("-%d-%m-%Y")
name 
from datetime import date
from os import path
yesterday = int(date.today().strftime("%d")) - 1
name = "pdf " + str(yesterday) + date.today().strftime("-%d-%m-%Y")
name
help(os)
import os
help(os)
yesterday = int(date.today().strftime("%d")) - 1
from datetime import date
yesterday = int(date.today().strftime("%d")) - 1
date.today()
date.yesterday()
help(date)
import calendar
import os
import shutil
from datetime import date
from os import path
def yesterday():
    day = int(date.today().strftime("%d"))
    month = int(date.today().strftime("%m"))
    year = int(date.today().strftime("%Y"))
    long_months = [1, 3, 5, 7, 8, 10, 12]
    if day != 1:
        return day - 1
    if month in long_months:
        return 31
    elif month == 2:
        if calendar.isleap(year):
            return 29
        return 28
    else:
        return 30
yesterday = int(date.today().strftime("%d")) - 1
name = "pdf " + str(yesterday()) + date.today().strftime("-%d-%m-%Y")
import calendar
import os
import shutil
from datetime import date
from os import path
def yesterday():
    day = int(date.today().strftime("%d"))
    month = int(date.today().strftime("%m"))
    year = int(date.today().strftime("%Y"))
    long_months = [1, 3, 5, 7, 8, 10, 12]
    if day != 1:
        return day - 1
    if month in long_months:
        return 31
    elif month == 2:
        if calendar.isleap(year):
            return 29
        return 28
    else:
        return 30
name = "pdf " + str(yesterday()) + date.today().strftime("-%d-%m-%Y")
yesterday
yesterday()
import time
a = time.perf_counter()
a
b
b-a
time.sleep(b-a)
os.cwd()
import os
os.cwd()
os.listdir()
from pathlib import Path
import sys
path = Path(__file__).parent.absolute()
from .. import interferences
from pathlib import Path
path = Path(__file__).parent.absolute()
path = Path().parent.absolute()
path
path = Path().parent.parent.absolute()
path
path = Path().parents[]
path = Path().parents()
path = Path().parents
path
path = Path().parents
path
path.parents[0]
path[0]
path = Path.parents[0]
path = Path().parent.absolute()
path = Path(path)
path = Path().parent.absolute()
path
path = Path(path)
path
path.parent.absolute()
path = Path(Path().parent.absolute()).parent.absolute()
path
from pathlib import Path
Path(Path(__file__).parent.absolute()).parent.absolute()
Path(Path().parent.absolute()).parent.absolute()
Path(Path().parent.absolute()).parent.relative()
with open('/home/rufus/Workspace2019/python_fiddle/countries/countries.json') as json_file:
    data = json.load(json_file)
import json
with open('/home/rufus/Workspace2019/python_fiddle/countries/countries.json') as json_file:
    data = json.load(json_file)
data 
data.keys()
somelist = range(10)
for x in somelist:
 somelist.remove(x)
for x in somelist[:]:
 somelist.remove(x)
import os
help(os)
dic = {ads:1, adt:2, adc:3}
dic = {'ads':1, 'adt':2, 'adc':3}
max(dic)
max(dic.values())
Tv = {'BreakingBad':100, 'GameOfThrones':1292, 'TMKUC' : 88} 
  
Keymax = max(Tv, key=Tv.get) 
print(Keymax) 
help(dict)
Tv = {'BreakingBad', 'GameOfThrone','TMKUC'} 
Tv
help(dict)
"bosnia" in "ireland"
"landeri" in "ireland"
import shutil
help(shutil)
import json
with open('movie_ids_02_13_2020.json') as jsonfile:
 data = json.load(jsonfile)
with open('movie_ids_02_13_2020.json') as jsonfile:
 data = json.load(jsonfile)
with open('movie_ids_02_13_2020.json') as jsonfile:
 data = json.load(jsonfile)
import json
with open('movie_ids_02_13_2020.json') as jsonfile:
 data = json.load(jsonfile)
import json
with open('movie_ids_02_13_2020.json') as jsonfile:
 data = json.load(jsonfile)
data
for i in data:
 print(i)
import time 
def json_data():
 for i in data:
  pass
a = time.perf_counter();json_data();b=time.perf_counter()
b-a
from PyDictionary import PyDictionary
dictionary=PyDictionary("hotel","ambush","nonchalant","perceptive")
print(dictionary.printMeanings())
print(dictionary.getMeanings()) 
print (dictionary.getSynonyms())
print (dictionary.translateTo("hi"))
import markdown
help(markdown)
import os
import datetime
import re
files = []
for file in os.listdir("C:\\Users\\Mayur Pawar\\Desktop\\FTP work"):
    if file.endswith(".csv"):
        files.append(file)
#s = sorted(files)
#print(files)
for file in os.listdir("."):
    if file.endswith(".csv"):
        files.append(file)
print(files)
s = sorted(files)
s
import re
last_file = max(files, key=lambda x: int(re.search(r'\d+', x).group()))
last_file
a = ";dsaklfdsaj"
"".join(a)
a = [1,2,3,5.1,2]
"".join(a)
a = ['b', 'o', 'n', 'n']
"".join(a)
help(list)
a.replace('o', 'a')
a = "".join(a)
a.replace('o', 'a')
a
a = os.listdir('.')
import os
a = os.listdir('.')
a
a = "/".join(a)
a
a.replace("/", "_")
a
b = [3,0,1,0]
b[1:]
a[1:]
files = /Users/apt/testdir/d1/a.txt 
/Users/apt/testdir/d1/d3/a.txt 
/Users/apt/testdir/d1/d3/d4/a.txt 
a = list()
a.append('/Users/apt/testdir/d1/a.txt')
a.append('/Users/apt/testdir/d1/d3/a.txt')
a.append('/Users/apt/testdir/d1/d3/d4/a.txt')
a.append('/Users/apt/testdir/d1/d3/d5/a.txt')
a
import os
def copy(file, new_dir):
   file_name=file[1:]
   file_name=file_name.replace('/', "_")
   file_path=os.path.join(new_dir, file_name)
   shutil.copy(file, new_dir)
   os.chdir(os.path.abspath(new_dir))
   os.rename(list(os.path.split(file))[1], file_name)
for file in a:
 copy(file, '.')
import shutil
for file in a:
 copy(file, '.')
import file
from PyDictionary import PyDictionary 
dictionary = PyDictionary() 
print (dictionary.synonym("Life")) 
from PyDictionary import PyDictionary 
dictionary = PyDictionary() 
print (dictionary.synonym("Life")) 
from threading import Thread
t = Thread()
t.daemon = True
t.start
t.start()
t._stop()
import threading
threading.enumerate()
t.start()
int('(9')
